<!-- @format -->

<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>BSE</title>

  <!-- Font Preloading -->
  <link rel="preload" href="/public/fonts/CassandraPersonalUse/CassandraPersonalUse-Regular.ttf" as="font"
    type="font/ttf" crossorigin="anonymous" />
  <link rel="preload" href="/public/fonts/CerebriSansPro/CerebriSansPro-Regular.ttf" as="font" type="font/ttf"
    crossorigin="anonymous" />

  <link rel="preload" href="/public/fonts/CassandraPersonalUse/CassandraPersonalUse-Regular.ttf" as="font"
    type="font/ttf" crossorigin="anonymous" />
  <link rel="preload" href="/public/fonts/CerebriSansPro/CerebriSansPro-Regular.ttf" as="font" type="font/ttf"
    crossorigin="anonymous" />

  <link rel="preload" href="/public/fonts/Lato/Lato-Regular.ttf" as="font" type="font/ttf" crossorigin />

  <link rel="preload" href="/public/fonts/Lato/Lato-Bold.ttf" as="font" type="font/ttf" crossorigin />

  <!-- title logo -->
  <link rel="icon" href="/public/images/bse.png" type="image/icon type" />

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css?v=2" />

  <!-- Bootstrap  -->
  <link href="/public/plugins/bootstrap/css/bootstrap.min.css?v=2" rel="stylesheet" />
  <script src="/public/plugins/bootstrap/js/bootstrap.min.js?v=2"></script>

  <!-- MDB5  -->
  <link href="/public/plugins/MDB5-7.2.0/css/mdb.min.css?v=2" rel="stylesheet" />
  <script src="/public/plugins/MDB5-7.2.0/js/mdb.es.min.js?v=2"></script>

  <!-- jQuery -->
  <script src="/public/plugins/jquery/jquery.min.js?v=2"></script>

  <!-- Select2 -->
  <link rel="stylesheet" href="/public/plugins/select2/css/select2.min.css?v=2" />
  <script src="/public/plugins/select2/js/select2.min.js?v=2"></script>

  <!-- DataTable -->
  <link rel="stylesheet" href="/public/plugins/dataTables/datatables.min.css?v=2" />
  <script src="/public/plugins/dataTables/datatables.min.js?v=2"></script>
  <script src="/public/plugins/dataTables/dataTables.bootstrap5.min.js?v=2"></script>
  <!-- Responsive Datatable -->
  <link rel="stylesheet" href="/public/plugins/dataTables/datatables.responsive.min.css?v=2" />
  <script src="/public/plugins/dataTables/datatables.responsive.min.js?v=2"></script>

  <!-- Toast -->
  <link rel="stylesheet" href="/public/plugins/Toastr/toastr.min.css?v=2" />
  <script src="/public/plugins/Toastr/toastr.min.js?v=2"></script>

  <!-- perfect-scrollbar plugin -->
  <script src="/public/plugins/perfect-scrollbar/perfect-scrollbar.min.js?v=2"></script>

  <!-- Font Awesome -->
  <link rel="stylesheet" href="/public/plugins/font-awesome/css/all.min.css?v=2" />

  <!-- jQuery Confirm -->
  <link rel="stylesheet" href="/public/plugins/jquery-confirm/css/jquery-confirm.min.css?v=2" />
  <script src="/public/plugins/jquery-confirm/js/jquery-confirm.min.js?v=2"></script>

  <!-- Slide-in Panel -->
  <link rel="stylesheet" href="/public/plugins/slide-in-panel/css/slidePanel.min.css?v=2" />
  <script src="/public/plugins/slide-in-panel/js/slidePanel.min.js?v=2"></script>

  <!-- Tippy -->
  <link rel="stylesheet" href="/public/plugins/tippy/scale.css?v=2" />
  <script src="/public/plugins/tippy/popper.min.js?v=2"></script>
  <script src="/public/plugins/tippy/tippy-bundle.umd.min.js?v=2"></script>

  <!-- jQuery Smart Tab -->
  <link href="/public/plugins/smartTab/smart_tab.all.min.css?v=2" rel="stylesheet" type="text/css" />
  <script type="text/javascript" src="/public/plugins/smartTab/smart_tab.min.js"></script>

  <!-- jQuery custom scrollbar -->
  <link href="/public/plugins/jquery-custom-scrollbar/jquery.custom-scrollbar.css?v=2" rel="stylesheet"
    type="text/css" />
  <script type="text/javascript" src="/public/plugins/jquery-custom-scrollbar/jquery.custom-scrollbar.min.js"></script>

  <!-- Custom CSS -->
  <link rel="stylesheet" href="/public/css/style.css" />

  <!-- Custom Script -->
  <script src="/public/custom/App.js?v=2"></script>

  <style type="text/css">
    @font-face {
      font-family: "CassandraPersonalUse";
      src: url("/public/fonts/CassandraPersonalUse/CassandraPersonalUse-Regular.ttf?v=2") format("truetype");
    }

    @font-face {
      font-family: "CerebriSansPro-Regular";
      src: url("/public/fonts/CerebriSansPro/CerebriSansPro-Regular.ttf?v=2") format("truetype");
    }

    @font-face {
      font-family: "RedditMono-Regular";
      src: url("/public/fonts/RedditMono/RedditMono-Regular.ttf?v=2") format("truetype");
    }

    @font-face {
      font-family: "Lato-Regular";
      src: url("/public/fonts/Lato/Lato-Regular.ttf?v=2") format("truetype");
    }

    @font-face {
      font-family: "Lato-Bold";
      src: url("/public/fonts/Lato/Lato-Bold.ttf?v=2") format("truetype");
    }

    body {
      font-family: "CerebriSansPro-Regular";
      background-color: #f7f9fd;
    }

    .toast {
      opacity: 1 !important;
    }

    a,
    .edit,
    .view,
    .close,
    .del {
      cursor: pointer;
    }

    .panelClose {
      cursor: pointer;
    }

    .select2-dropdown {
      z-index: 10000 !important;
    }

    /* Table Pagination */
    .page-item.active .page-link {
      color: #fff !important;
      background-color: #ea5455 !important;
      border-color: #ea5455 !important;
    }

    .page-link {
      color: #000 !important;
      background-color: #fff !important;
      border: 1px solid #dee2e6 !important;
    }

    .page-link:hover {
      color: #fff !important;
      background-color: #f17979 !important;
      border-color: #ea5455 !important;
    }

    svg.radial-progress {
      width: 60px;
      height: auto;
      transform: rotate(-90deg);
    }

    svg.radial-progress circle {
      fill: none;
      stroke: white;
      stroke-dashoffset: 219.91148575129;
      stroke-width: 6;
      stroke-linecap: round;
    }

    svg.radial-progress circle.incomplete {
      opacity: 0.15;
    }

    svg.radial-progress circle.complete {
      stroke-dasharray: 219.91148575129;
    }

    svg.radial-progress text {
      fill: white;
      text-anchor: middle;
    }

    .topMenu-item {
      cursor: pointer;
    }

    .topMenu-item-active {
      /* box-shadow: 0 -2px 0 0 #ea5455; */
      color: #ea5455;
    }

    .topMenu-item-active .icon-button {
      /* border-bottom: 1px solid #ea5455; */
      background-color: #ea5455 !important;
      color: white;

      /* background-color: #f07b3f; */
      /* border-radius: 8px; */
      transition: right 0.3s ease;
      /* font-weight: bold; */
    }

    .topMenu-item:hover:not(.topMenu-item-active) {
      /* box-shadow: 0 -2px 0 0 #ea5455; */
      color: #ea5455;
    }

    #dispatchProductTable_wrapper {
      margin-top: 60px !important;
    }

    .slideInPanel {
      z-index: 9999;
      position: fixed;
      top: 0;
      bottom: 0;
      right: -600px;
      width: 400px;
      background-color: #1f2d3e;
      color: #e3e3e3;
      height: 90vh;
      /* box-shadow: 0 0 0px rgba(0, 0, 0, 0.2); */
      transition: right 0.3s ease;
      border-radius: 8px;
    }

    /* Input */
    .slideInPanel input {
      background-color: transparent;
      border-color: rgba(98, 114, 147, 0.6);
    }

    .slideInPanel input:focus {
      background-color: transparent;
    }

    .slideInPanel input:hover {
      border-color: #627293;
    }

    /* Select */
    .slideInPanel .select2-container {
      background-color: transparent !important;
      border-color: rgba(98, 114, 147, 0.6) !important;
      color: 627293 !important;
    }

    .select2-container {
      width: 100% !important;
    }

    .select2-selection__rendered,
    .select2-selection__clear,
    .select2-selection__arrow {
      color: white !important;
      margin-top: 0.25rem !important;
    }

    .select2-selection {
      background-color: transparent !important;
      border-color: rgba(98, 114, 147, 0.6) !important;
      height: 35px !important;
    }

    .slideInPanel .select:focus {
      background-color: transparent;
      border-color: #627293;
    }

    .slideInPanel .select2-container:hover {
      border-color: #627293;
    }

    /* TextArea */
    .slideInPanel textarea {
      background-color: transparent;
      border-color: rgba(98, 114, 147, 0.6);
    }

    .slideInPanel textarea:focus {
      background-color: transparent;
    }

    .slideInPanel textarea:hover {
      border-color: #627293;
    }

    /* Form Control */
    .slideInPanel .form-control {
      color: #f7f9fc;
    }

    .slideInPanel .form-control::placeholder {
      color: #627293;
    }

    .select2-selection::placeholder {
      color: #627293;
    }

    table.dataTable th {
      text-align: left !important;
    }

    fieldset {
      border-color: rgba(129, 145, 179, 0.6) !important;
      border-radius: 4px;
    }

    legend {
      margin-top: -1.7rem !important;
      background-color: #e0e0e0;
      color: #1f2d3e;
      border-radius: 4px;
      font-size: inherit !important;
    }

    #appendOutput:hover {
      background-color: rgb(135, 49, 177);
      background-color: linear-gradient(90deg,
          rgba(135, 49, 177, 1) 1%,
          rgba(191, 24, 188, 1) 35%,
          rgba(209, 52, 174, 1) 68%,
          rgba(217, 29, 115, 1) 100%);
      color: white;
    }

    /*
      #appendOutput {
        color: rgba(98, 114, 147, 0.6) !important;
      } */

    .st-theme-brick>.nav .nav-link.active {
      background-color: #dc4c64 !important;
    }

    .st-theme-brick>.nav .nav-link {
      color: #dc4c64 !important;
    }

    .st-theme-brick>.nav {
      border-color: #dc4c64 !important;
    }

    .vl {
      border-left: 2px dashed rgba(98, 114, 147, 0.6);
      height: 25px;
      position: absolute;
      left: 50%;
      margin-left: -3px;
      /* bottom: -10; */
    }

    .vl-top {
      border-left: 2px dashed rgba(98, 114, 147, 0.6);
      height: 35px;
      position: absolute;
      left: 50%;
      margin-left: -3px;
      /* bottom: -10; */
    }

    .tippy-box {
      /* background-color: white !important; */
      max-width: 100% !important;
      /* box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.175); */
    }

    .progressBar-label {
      font-family: "Lato-Regular";
      font-size: 13px;
      /* font-weight: bold; */
      color: white;
    }

    .progressBar-weight {
      font-size: 20px;
      font-weight: bold;
      color: #b4b4b4;
      font-family: "Lato-Bold";
    }

    .progressBar-weight-unit {
      font-size: 12px;
      /* font-weight: bold; */
      color: #b4b4b4;
    }

    .icon-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 50px;
      height: 50px;
      background-color: white;
      /* border: 2px solid #ddd; */
      border-radius: 50%;
      /* box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); */
      text-decoration: none;
      color: #333;
      transition:
        background-color 0.3s,
        color 0.3s,
        box-shadow 0.3s;
    }

    .icon-button i {
      font-size: 12px;
    }

    .icon-label {
      font-size: 14px;
      font-weight: 600;
    }

    .stepper-menu {
      background-color: #293646;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
  </style>
</head>

<body>
  <div class="container-fluid">
    <div class="row d-flex justify-content-center">
      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <!-- ------------------------------------------ Top Menu Container ----------------------------------------------- -->
      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <div class="topMenu-container d-flex justify-content-center overflow-auto mt-0">
        <div
          class="topMenu-item topMenu-item-active dispatchMenu d-flex flex-column justify-content-center align-items-center mx-5 p-2">
          <div class="icon-button shadow">
            <i class="fa-solid fa-car"></i>
          </div>
          <div class="icon-label pt-2">
            <span>Dispatch</span>
          </div>
        </div>

        <div class="topMenu-item peelingMenu d-flex flex-column justify-content-center align-items-center mx-5 p-2">
          <div class="icon-button shadow">
            <i class="fa-solid fa-building"></i>
          </div>
          <div class="icon-label pt-2">
            <span>Peeling</span>
          </div>
        </div>

        <div
          class="topMenu-item peeledDispatchMenu d-flex flex-column justify-content-center align-items-center mx-5 p-2">
          <div class="icon-button shadow">
            <i class="fa-solid fa-car"></i>
          </div>
          <div class="icon-label pt-2">
            <span>Dispatch</span>
          </div>
        </div>

        <div class="topMenu-item packingMenu d-flex flex-column justify-content-center align-items-center mx-5 p-2">
          <div class="icon-button shadow">
            <i class="fa-solid fa-boxes-packing"></i>
          </div>
          <div class="icon-label pt-2">
            <span>Packing</span>
          </div>
        </div>
      </div>
      <!-- Top Menu Container Ends -->

      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <!-- ------------------------------------- Stats Container ---------------------------------------------------- -->
      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <div class="row d-flex flex-column align-content-center justify-content-center p-0 position-relative mt-5">
        <div class="position-absolute" style="z-index: 98">
          <hr class="line" style="border: 4px solid rgb(31, 45, 62); opacity: 0.3" />
        </div>
        <div class="row d-flex justify-content-center p-0" style="z-index: 99">
          <div class="col">
            <div class="stepper-menu border rounded">
              <table>
                <tbody>
                  <tr>
                    <td class="p-3">
                      <svg class="radial-progress" id="dispatchCircle" data-percentage="0" viewBox="0 0 80 80">
                        <circle class="incomplete" cx="40" cy="40" r="35"></circle>
                        <circle class="complete" cx="40" cy="40" r="35" style="stroke-dashoffset: 0"></circle>
                        <text id="dispatchPercentage" class="percentage" x="50%" y="57%"
                          transform="matrix(0, 1, -1, 0, 80, 0)">
                          0%
                        </text>
                      </svg>
                    </td>
                    <td>
                      <div class="d-flex flex-column">
                        <span class="progressBar-label heading">Dispatch</span>

                        <span class="weightContainer">
                          <span class="progressBar-weight weight fw-bold dispatchWeight"
                            style="font-weight: RedditMono-Regular">0</span>
                          <span class="progressBar-weight-unit">kg</span>
                        </span>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <div class="col">
            <div class="stepper-menu border rounded">
              <table>
                <tbody>
                  <tr>
                    <td class="p-3">
                      <svg class="radial-progress" id="preprocessingCircle" data-percentage="0" viewBox="0 0 80 80">
                        <circle class="incomplete" cx="40" cy="40" r="35"></circle>
                        <circle class="complete" cx="40" cy="40" r="35" style="stroke-dashoffset: 0"></circle>
                        <text id="preprocessingPercentage" class="percentage" x="50%" y="57%"
                          transform="matrix(0, 1, -1, 0, 80, 0)">
                          0%
                        </text>
                      </svg>
                    </td>
                    <td>
                      <div class="d-flex flex-column">
                        <span class="progressBar-label heading">Peeling</span>
                        <div class="weightContainer">
                          <span class="progressBar-weight weight preprocessingWeight"
                            style="font-weight: RedditMono-Regular">0</span>
                          <span class="progressBar-weight-unit">kg</span>
                        </div>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <div class="col">
            <div class="stepper-menu border rounded">
              <table>
                <tbody>
                  <tr>
                    <td class="p-3">
                      <svg class="radial-progress" id="peeledDispatchCircle" data-percentage="0" viewBox="0 0 80 80">
                        <circle class="incomplete" cx="40" cy="40" r="35"></circle>
                        <circle class="complete" cx="40" cy="40" r="35" style="stroke-dashoffset: 0"></circle>
                        <text id="peeledDispatchPercentage" class="percentage" x="50%" y="57%"
                          transform="matrix(0, 1, -1, 0, 80, 0)">
                          0%
                        </text>
                      </svg>
                    </td>
                    <td>
                      <div class="d-flex flex-column">
                        <span class="progressBar-label heading">Dispatch</span>
                        <div class="weightContainer">
                          <span class="progressBar-weight weight peeledDispatchWeight"
                            style="font-weight: RedditMono-Regular">0</span>
                          <span class="progressBar-weight-unit">kg</span>
                        </div>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          <div class="col">
            <div class="stepper-menu border rounded">
              <table>
                <tbody>
                  <tr>
                    <td class="p-3">
                      <svg class="radial-progress" id="packingCircle" data-percentage="0" viewBox="0 0 80 80">
                        <circle class="incomplete" cx="40" cy="40" r="35"></circle>
                        <circle class="complete" cx="40" cy="40" r="35" style="stroke-dashoffset: 0"></circle>
                        <text id="packingPercentage" class="percentage" x="50%" y="57%"
                          transform="matrix(0, 1, -1, 0, 80, 0)">
                          0%
                        </text>
                      </svg>
                    </td>
                    <td>
                      <div class="d-flex flex-column">
                        <span class="progressBar-label heading">Packing</span>
                        <div class="weightContainer">
                          <span class="progressBar-weight weight packingWeight"
                            style="font-weight: RedditMono-Regular">0</span>
                          <span class="progressBar-weight-unit">kg</span>
                        </div>
                      </div>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <!-- ------------------------------------- Dispatch Container ---------------------------------------------------- -->
      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <div class="menu-container dispatchContainer d-none">
        <!-- Slide-in Panel -->
        <div id="dispatchSlideInPanel" class="slideInPanel px-4 overflow-auto">
          <div class="row d-flex justify-content-center">
            <div class="col-sm-12 col-md-12 col-md-12">
              <div class="text-center mt-4 d-flex justify-content-between">
                <span id="dispatchPanelHeading" class="fw-bold fs-5">Add Dispatch Data</span>
                <div class="col my-auto d-flex justify-content-end">
                  <i class="fa-solid fa-circle-xmark my-auto panelClose" id="closeDispatchPanelBtn"></i>
                </div>
              </div>

              <hr />

              <div class="form-group mt-4">
                <label for="lot_no">Lot No:</label>
                <select class="form-control input-dropdown w-100" id="lotNumbers" name="lotNumbers"></select>
              </div>

              <div class="form-group mt-4">
                <label for="product_name">Product Name:</label>
                <select class="form-control input-dropdown w-100" id="productNames" name="productNames"></select>
              </div>

              <div class="form-group mt-4">
                <label for="destinationLocation">Destination</label>
                <select class="form-control input-dropdown w-100" id="destinationLocation"
                  name="destinationLocation"></select>
              </div>

              <div class="form-group mt-4">
                <label for="dispatch_quantity">Quantity</label>
                <input id="dispatch_quantity" class="form-control" type="number" placeholder="eg. 10"
                  name="dispatch_quantity" required />
                <span style="font-size: 12px">Balance Purchased Quantity :
                  <span class="fw-bold" id="balance_procure_quantity"></span></span>
              </div>

              <div class="form-group mt-4">
                <label for="dispatch_temperature">Temperature</label>
                <input id="dispatch_temperature" class="form-control" type="number" placeholder="eg. 12.9"
                  name="dispatch_temperature" required />
              </div>

              <div class="form-group mt-4">
                <label for="vehicleNumbers">Vehicle Number</label>
                <select class="form-control input-dropdown w-100" id="vehicleNumbers" name="vehicleNumbers"></select>
              </div>

              <div class="form-group mt-4">
                <label for="driverNames">Driver Name</label>
                <select class="form-control input-dropdown w-100" id="driverNames" name="driverNames"></select>
              </div>

              <div class="form-group mt-4">
                <label for="delivery_notes">Delivery Notes</label>
                <textarea row="3" class="form-control input-dropdown w-100" id="delivery_notes"
                  name="delivery_notes"></textarea>
              </div>

              <div class="d-flex justify-content-between mt-4 py-3 pb-4">
                <div id="submitDispatch" class="col-lg-5 btn btn-danger">
                  Save
                </div>
                <div id="resetDispatchDataBtn" class="col-lg-5 btn btn-outline-danger">
                  Clear
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Table Content -->
        <div class="rounded-2 d-flex justify-content-center py-4">
          <div class="border p-4 w-100">
            <!-- Add Button -->
            <div class="d-flex rounded-2 justify-content-end pb-4">
              <div id="openDispatchPanelBtn" class="btn btn-outline-danger d-flex justify-content-around"
                style="width: 150px">
                <i class="fa-solid fa-circle-plus my-auto"></i>
                <span style="margin-top: 4px" class="fw-bold my-auto">Dispatch</span>
              </div>
            </div>

            <table id="dispatchTable" class="rounded table table-hover nowrap w-100">
              <thead>
                <tr>
                  <th style="border-radius: 4px 0 0 0"></th>
                  <th class="fw-bold"><span>Procurement Date</span></th>
                  <th class="fw-bold"><span>Procurement Lot</span></th>
                  <th class="fw-bold"><span>Total Purchased Weight</span></th>
                  <th class="fw-bold">
                    <span>Total Dispatched Items</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Dispatched Weight</span>
                  </th>
                </tr>
              </thead>
            </table>
          </div>
        </div>
      </div>

      <!-- modal-dialog-centered modal-dialog-scrollable -->
      <!-- Modal -->
      <div id="dispatchModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <h4 class="modal-title">Dispatched Products</h4>
              <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
              </i>
            </div>
            <div class="modal-body">
              <div class="d-flex justify-content-between">
                <div class="form-group">
                  <label class="fw-bold" for="lot_no">Lot No:</label>
                  <span id="view_lot_no"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_products">Total Dispatches:</label>
                  <span id="view_total_dispatches"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_weight">Total Weight:</label>
                  <span id="view_total_dispatch_weight"></span>
                </div>
              </div>

              <hr class="mb-4" />

              <table id="dispatchProductTable" class="rounded table table-hover nowrap w-100">
                <thead>
                  <tr>
                    <th style="border-radius: 4px 0 0 0"></th>
                    <th class="fw-bold"><span>Product Name</span></th>
                    <th class="fw-bold"><span>Purchased Quantity</span></th>
                    <th class="fw-bold"><span>Dispatched Quantity</span></th>
                    <th class="fw-bold"><span>Temperature</span></th>
                    <th class="fw-bold"><span>Destination</span></th>
                    <th class="fw-bold"><span>Vehicle Name</span></th>
                    <th class="fw-bold"><span>Driver Name</span></th>
                    <th class="fw-bold"><span>Delivery Notes</span></th>
                    <th class="fw-bold"><span>Delivery Status</span></th>
                    <th class="fw-bold"><span>Dispatched Date</span></th>
                  </tr>
                </thead>
              </table>
            </div>
            <div class="modal-footer">
              <button type="button" class="close btn btn-default" data-dismiss="modal">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Dispatch Container Ends -->

      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <!-- ------------------------------------- Peeling Container ---------------------------------------------------- -->
      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <div class="menu-container peelingContainer d-none">
        <!-- Slide-in Panel -->
        <div id="peelingSlideInPanel" class="slideInPanel px-4 overflow-auto">
          <div class="row d-flex justify-content-center">
            <div class="col-sm-12 col-md-12 col-md-12">
              <div class="text-center mt-4 d-flex justify-content-between">
                <span id="peelingPanelHeading" class="fw-bold fs-5">Add Peeling Data</span>
                <div class="col my-auto d-flex justify-content-end">
                  <i class="fa-solid fa-circle-xmark my-auto panelClose" id="closePeelingPanelBtn"></i>
                </div>
              </div>

              <hr />

              <div id="smarttab" class="border-0">
                <ul class="nav">
                  <li>
                    <a class="nav-link">Input</a>
                  </li>
                  <li>
                    <a class="nav-link">Output</a>
                  </li>
                </ul>

                <div class="tab-content">
                  <div id="tab-1" class="tab-pane p-0" role="tabpanel">
                    <div class="form-group mt-4">
                      <label for="lot_no">Lot No:</label>
                      <select class="form-control input-dropdown w-100" id="peelingLotNumbers"
                        name="peelingLotNumbers"></select>
                    </div>

                    <div class="form-group mt-4">
                      <label for="s">Peeling Center</label>
                      <select class="form-control input-dropdown w-100" id="peelingCenters"
                        name="peelingCenters"></select>
                    </div>

                    <div class="form-group mt-4">
                      <label for="rawMaterials">Raw Materials</label>
                      <select class="form-control input-dropdown w-100" id="rawMaterials" name="rawMaterials"></select>
                    </div>

                    <div class="form-group mt-4">
                      <label for="peeling_quantity">Quantity</label>
                      <input id="peeling_quantity" class="form-control" type="number" placeholder="eg. 10"
                        name="peeling_quantity" required />
                      <span style="font-size: 12px">Balance Dispatched Quantity :
                        <span class="fw-bold" id="balance_dispatched_quantity"></span></span>
                    </div>

                    <div class="form-group mt-4">
                      <label for="peeling_method">Peeling Method</label>
                      <select class="form-control input-dropdown w-100" id="peelingMethods"
                        name="peelingMethods"></select>
                    </div>
                  </div>
                  <div id="tab-2" class="tab-pane p-0" role="tabpanel">
                    <div id="outputContainer">
                      <fieldset class="form-group border p-3 peelingOutput peelingOutput_1" style="
                            border-color: rgba(129, 145, 179, 0.6) !important;
                            margin-top: 2.2rem !important;
                          ">
                        <legend class="mb-2 w-auto px-2">Output 1</legend>
                        <div class="form-group">
                          <label for="product_name">Product Name:</label>
                          <select class="form-control input-dropdown w-100 peelingProductNames peelingProductNames_1"
                            name="peelingProductNames"></select>
                        </div>

                        <div class="form-group mt-4">
                          <label for="yield_quantity">Yield Quantity </label>
                          <input class="form-control yield_quantity yield_quantity_1" type="number" placeholder="eg. 10"
                            name="yield_quantity" required />
                        </div>

                        <div class="form-group mt-4 mb-4">
                          <label for="peeling_notes">Peeling Notes</label>
                          <textarea row="3" class="form-control input-dropdown w-100 peeling_notes peeling_notes_1"
                            name="peeling_notes"></textarea>
                        </div>
                      </fieldset>
                    </div>

                    <div class="vl"></div>
                    <div id="appendOutput" style="border-color: rgba(98, 114, 147, 0.6) !important"
                      class="btn border rounded d-flex justify-content-center mt-4">
                      <i class="fa-solid fa-circle-plus fs-5 my-1"></i>
                    </div>
                  </div>
                </div>
              </div>

              <div class="d-flex justify-content-between mt-4 py-3 pb-4">
                <div id="submitPeeling" class="col-lg-auto btn btn-danger">
                  Save
                </div>
                <div id="nextPeeling" class="col-lg-auto btn btn-outline-info">
                  Next
                </div>
                <div id="resetPeelingDataBtn" class="col-lg-auto btn btn-outline-warning">
                  Clear
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Table Content -->
        <div class="rounded-2 d-flex justify-content-center py-4">
          <div class="border p-4 w-100">
            <!-- Add Button -->
            <div class="d-flex rounded-2 justify-content-end pb-4">
              <div id="openPeelingPanelBtn" class="btn btn-outline-danger d-flex justify-content-around"
                style="width: 150px">
                <i class="fa-solid fa-circle-plus my-auto"></i>
                <span style="margin-top: 4px" class="fw-bold my-auto">Peeling</span>
              </div>
            </div>

            <table id="peelingTable" class="rounded table table-hover nowrap w-100">
              <thead>
                <tr>
                  <th style="border-radius: 4px 0 0 0"></th>
                  <th class="fw-bold"><span>Procurement Date</span></th>
                  <th class="fw-bold"><span>Procurement Lot</span></th>
                  <th class="fw-bold">
                    <span>Total Dispatched Weight</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Peeled Items</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Peeled Weight</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Yield</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Wastage</span>
                  </th>
                </tr>
              </thead>
            </table>
          </div>
        </div>
      </div>

      <!-- modal-dialog-centered modal-dialog-scrollable -->
      <!-- Modal -->
      <div id="peelingModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <h4 class="modal-title">Peeling Products</h4>
              <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
              </i>
            </div>
            <div class="modal-body">
              <div class="d-flex justify-content-between">
                <div class="form-group">
                  <label class="fw-bold" for="lot_no">Lot No:</label>
                  <span id="view_peeling_lot_no"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_products">Total Peelinges:</label>
                  <span id="view_total_peelinges"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_weight">Total Weight:</label>
                  <span id="view_total_peeling_weight"></span>
                </div>
              </div>

              <hr class="mb-4" />

              <table id="peelingProductTable" class="rounded table table-hover nowrap w-100">
                <thead>
                  <tr>
                    <th style="border-radius: 4px 0 0 0"></th>
                    <th class="fw-bold"><span>Raw Material</span></th>
                    <th class="fw-bold"><span>Products</span></th>
                    <th class="fw-bold"><span>Products Count</span></th>
                    <th class="fw-bold"><span>Dispatched Quantity</span></th>
                    <th class="fw-bold"><span>Peeled Quantity</span></th>
                    <th class="fw-bold"><span>Total Yield Quantity</span></th>
                    <th class="fw-bold"><span>Total Wastage</span></th>
                    <th class="fw-bold"><span>Peeling Method</span></th>
                    <th class="fw-bold"><span>Peeling Center</span></th>
                    <th class="fw-bold"><span>Peeling Date</span></th>
                  </tr>
                </thead>
              </table>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Peeling Container Ends -->

      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <!-- ------------------------------------- Peeled Dispatch Container --------------------------------------------- -->
      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <div class="menu-container peeledDispatchContainer d-none">
        <!-- Slide-in Panel -->
        <div id="peeledDispatchSlideInPanel" class="slideInPanel px-4 overflow-auto">
          <div class="row d-flex justify-content-center">
            <div class="col-sm-12 col-md-12 col-md-12">
              <div class="text-center mt-4 d-flex justify-content-between">
                <span id="peeledDispatchPanelHeading" class="fw-bold fs-5">Add Dispatch Data</span>
                <div class="col my-auto d-flex justify-content-end">
                  <i class="fa-solid fa-circle-xmark my-auto panelClose" id="closePeeledDispatchPanelBtn"></i>
                </div>
              </div>

              <hr />

              <div class="form-group mt-4">
                <label for="lot_no">Lot No:</label>
                <select class="form-control input-dropdown w-100" id="peeledLotNumbers"
                  name="peeledLotNumbers"></select>
              </div>

              <div class="form-group mt-4">
                <label for="product_name">Product Name:</label>
                <select class="form-control input-dropdown w-100" id="peeledProductNames"
                  name="peeledProductNames"></select>
              </div>

              <div class="form-group mt-4">
                <label for="distribution_location">Destination</label>
                <select class="form-control input-dropdown w-100" id="distributionLocation"
                  name="distributionLocation"></select>
              </div>

              <div class="form-group mt-4">
                <label for="peeled_dispatch_quantity">Quantity</label>
                <input id="peeled_dispatch_quantity" class="form-control" type="number" placeholder="eg. 10"
                  name="peeled_dispatch_quantity" required />
                <span style="font-size: 12px">Balance Peeled Quantity :
                  <span class="fw-bold" id="balance_peeled_quantity"></span></span>
              </div>

              <div class="form-group mt-4">
                <label for="peeled_dispatch_temperature">Temperature</label>
                <input id="peeled_dispatch_temperature" class="form-control" type="number" placeholder="eg. 12.9"
                  name="peeled_dispatch_temperature" required />
              </div>

              <div class="form-group mt-4">
                <label for="vehicleNumbers">Vehicle Number</label>
                <select class="form-control input-dropdown w-100" id="prodVehicleNumbers"
                  name="prodVehicleNumbers"></select>
              </div>

              <div class="form-group mt-4">
                <label for="driverNames">Driver Name</label>
                <select class="form-control input-dropdown w-100" id="prodDriverNames" name="prodDriverNames"></select>
              </div>

              <div class="form-group mt-4">
                <label for="delivery_notes">Delivery Notes</label>
                <textarea row="3" class="form-control input-dropdown w-100" id="peeled_delivery_notes"
                  name="peeled_delivery_notes"></textarea>
              </div>

              <div class="d-flex justify-content-between mt-4 py-3 pb-4">
                <div id="submitPeeledDispatch" class="col-lg-5 btn btn-danger">
                  Save
                </div>
                <div id="resetPeeledDispatchDataBtn" class="col-lg-5 btn btn-outline-danger">
                  Clear
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Table Content -->
        <div class="rounded-2 d-flex justify-content-center py-4">
          <div class="border p-4 w-100">
            <!-- Add Button -->
            <div class="d-flex rounded-2 justify-content-end pb-4">
              <div id="openPeeledDispatchPanelBtn" class="btn btn-outline-danger d-flex justify-content-around"
                style="width: 150px">
                <i class="fa-solid fa-circle-plus my-auto"></i>
                <span style="margin-top: 4px" class="fw-bold my-auto">Dispatch</span>
              </div>
            </div>

            <table id="peeledDispatchTable" class="rounded table table-hover nowrap w-100">
              <thead>
                <tr>
                  <th style="border-radius: 4px 0 0 0"></th>
                  <th class="fw-bold"><span>Peeled Date</span></th>
                  <th class="fw-bold"><span>Peeled Lot</span></th>
                  <th class="fw-bold"><span>Total Yielded Weight</span></th>
                  <th class="fw-bold">
                    <span>Total Dispatched Items</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Dispatched Weight</span>
                  </th>
                </tr>
              </thead>
            </table>
          </div>
        </div>
      </div>

      <!-- modal-dialog-centered modal-dialog-scrollable -->
      <!-- Modal -->
      <div id="peeledDispatchModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <h4 class="modal-title">Dispatched Products</h4>
              <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
              </i>
            </div>
            <div class="modal-body">
              <div class="d-flex justify-content-between">
                <div class="form-group">
                  <label class="fw-bold" for="lot_no">Lot No:</label>
                  <span id="view_peeled_dispatch_lot_no"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_products">Total Dispatches:</label>
                  <span id="view_total_peeled_dispatches"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_weight">Total Weight:</label>
                  <span id="view_total_peeled_dispatch_weight"></span>
                </div>
              </div>

              <hr class="mb-4" />

              <table id="peeledDispatchProductTable" class="rounded table table-hover nowrap w-100">
                <thead>
                  <tr>
                    <th style="border-radius: 4px 0 0 0"></th>
                    <th class="fw-bold"><span>Product Name</span></th>
                    <th class="fw-bold"><span>Peeled Quantity</span></th>
                    <th class="fw-bold"><span>Dispatched Quantity</span></th>
                    <th class="fw-bold"><span>Temperature</span></th>
                    <th class="fw-bold"><span>Destination</span></th>
                    <th class="fw-bold"><span>Vehicle Name</span></th>
                    <th class="fw-bold"><span>Driver Name</span></th>
                    <th class="fw-bold"><span>Delivery Notes</span></th>
                    <th class="fw-bold"><span>Delivery Status</span></th>
                    <th class="fw-bold"><span>Dispatched Date</span></th>
                  </tr>
                </thead>
              </table>
            </div>
            <div class="modal-footer">
              <button type="button" class="close btn btn-default" data-dismiss="modal">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
      <!-- Peeled Dispatch Container Ends -->

      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <!-- ------------------------------------- Peeled Dispatch Container --------------------------------------------- -->
      <!-- ------------------------------------------------------------------------------------------------------------- -->
      <div class="menu-container packingContainer d-none">
        <!-- Slide-in Panel -->
        <div id="packingSlideInPanel" class="slideInPanel px-4 overflow-auto">
          <div class="row d-flex justify-content-center">
            <div class="col-sm-12 col-md-12 col-md-12">
              <div class="text-center mt-4 d-flex justify-content-between">
                <span id="packingPanelHeading" class="fw-bold fs-5">Add Packing Data</span>
                <div class="col my-auto d-flex justify-content-end">
                  <i class="fa-solid fa-circle-xmark my-auto panelClose" id="closePackingPanelBtn"></i>
                </div>
              </div>

              <hr />

              <div class="form-group mt-4">
                <label for="lot_no">Lot No:</label>
                <select class="form-control input-dropdown w-100" id="packingLotNumbers"
                  name="packingLotNumbers"></select>
              </div>

              <div class="form-group mt-4">
                <label for="product_name">Product Name:</label>
                <select class="form-control input-dropdown w-100" id="packingProductNames"
                  name="packingProductNames"></select>
              </div>

              <div class="form-group mt-4">
                <label for="distribution_location">Distribution Center</label>
                <select class="form-control input-dropdown w-100" id="packingDistributionLocation"
                  name="packingDistributionLocation"></select>
              </div>

              <div class="form-group mt-4">
                <label for="packingGrade">Grade</label>
                <select class="form-control input-dropdown w-100" id="packingGrade" name="packingGrade"></select>
              </div>

              <div class="form-group mt-4">
                <label for="packingSize">Size</label>
                <select class="form-control input-dropdown w-100" id="packingSize" name="packingSize"></select>
              </div>

              <div class="form-group mt-4">
                <label for="packingPackage">Packing Container</label>
                <select class="form-control input-dropdown w-100" id="packingPackage" name="packingPackage"></select>
              </div>

              <div class="form-group mt-4">
                <label for="packing_quantity">Quantity</label>
                <input id="packing_quantity" class="form-control" type="number" placeholder="eg. 10"
                  name="packing_quantity" required />
                <span style="font-size: 12px">Balance Packed Quantity :
                  <span class="fw-bold" id="balance_packed_quantity"></span></span>
              </div>

              <div class="form-group mt-4">
                <label for="packing_notes">Packing Notes</label>
                <textarea row="3" class="form-control input-dropdown w-100" id="packing_notes"
                  name="packing_notes"></textarea>
              </div>

              <div class="d-flex justify-content-between mt-4 py-3 pb-4">
                <div id="submitPacking" class="col-lg-5 btn btn-danger">
                  Save
                </div>
                <div id="resetPackingDataBtn" class="col-lg-5 btn btn-outline-danger">
                  Clear
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Table Content -->
        <div class="rounded-2 d-flex justify-content-center py-4">
          <div class="border p-4 w-100">
            <!-- Add Button -->
            <div class="d-flex rounded-2 justify-content-end pb-4">
              <div id="openPackingPanelBtn" class="btn btn-outline-danger d-flex justify-content-around"
                style="width: 150px">
                <i class="fa-solid fa-circle-plus my-auto"></i>
                <span style="margin-top: 4px" class="fw-bold my-auto">Packing</span>
              </div>
            </div>

            <table id="packingTable" class="rounded table table-hover nowrap w-100">
              <thead>
                <tr>
                  <th style="border-radius: 4px 0 0 0"></th>
                  <th class="fw-bold"><span>Peeled Date</span></th>
                  <th class="fw-bold"><span>Peeled Lot</span></th>
                  <th class="fw-bold">
                    <span>Total Dispatched Weight</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Packed Items</span>
                  </th>
                  <th class="fw-bold">
                    <span>Total Packed Weight</span>
                  </th>
                </tr>
              </thead>
            </table>
          </div>
        </div>
      </div>

      <!-- modal-dialog-centered modal-dialog-scrollable -->
      <!-- Modal -->
      <div id="packingModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl">
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <h4 class="modal-title">Packed Products</h4>
              <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
              </i>
            </div>
            <div class="modal-body">
              <div class="d-flex justify-content-between">
                <div class="form-group">
                  <label class="fw-bold" for="lot_no">Lot No:</label>
                  <span id="view_packing_lot_no"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_packing_products">Total Packed:</label>
                  <span id="view_total_packing"></span>
                </div>

                <div class="form-group">
                  <label class="fw-bold" for="total_weight">Total Weight:</label>
                  <span id="view_total_packed_weight"></span>
                </div>
              </div>

              <hr class="mb-4" />

              <table id="packingProductTable" class="rounded table table-hover nowrap w-100">
                <thead>
                  <tr>
                    <th style="border-radius: 4px 0 0 0"></th>
                    <th class="fw-bold"><span>Product Name</span></th>
                    <th class="fw-bold"><span>Dispatched Quantity</span></th>
                    <th class="fw-bold"><span>Packed Quantity</span></th>
                    <th class="fw-bold"><span>Packing Location</span></th>
                    <th class="fw-bold"><span>Grade</span></th>
                    <th class="fw-bold"><span>Size</span></th>
                    <th class="fw-bold"><span>Package Container</span></th>
                    <th class="fw-bold"><span>Packing Notes</span></th>
                    <th class="fw-bold"><span>Packing Status</span></th>
                    <th class="fw-bold"><span>Packed Date</span></th>
                  </tr>
                </thead>
              </table>
            </div>
            <div class="modal-footer">
              <button type="button" class="close btn btn-default" data-dismiss="modal">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
      <!-- Packing Container Ends -->
    </div>
  </div>
</body>

<script type="text/javascript">
  jQuery(document).ready(async function ($) {
    // Declarations
    let is_updated_data = false;

    toastr.options = {
      closeButton: false,
      debug: false,
      newestOnTop: true,
      progressBar: true,
      positionClass: "toast-top-right",
      preventDuplicates: false,
      onclick: null,
      showDuration: "300",
      hideDuration: "1000",
      timeOut: "5000",
      extendedTimeOut: "1000",
      showEasing: "swing",
      hideEasing: "linear",
      showMethod: "fadeIn",
      hideMethod: "fadeOut",
    };

    $(function () {
      // SmartTab initialize
      $("#smarttab").smartTab({
        selected: 0,
        theme: "brick",
        autoAdjustHeight: false,
        animation: "fade",
        // justified: false,
        keyboardSettings: {
          keyNavigation: true, // Enable/Disable keyboard navigation(left and right keys are used if enabled)
          keyLeft: [37], // Left key code
          keyRight: [39], // Right key code
        },
      });
    });

    // Menu navigation
    $(".topMenu-item").click(function () {
      $(".topMenu-item").removeClass("topMenu-item-active");

      $(this).addClass("topMenu-item-active");

      $(".panelClose").click();

      resetAllInputs();
    });

    // Global Functions
    // Function to format date as YYYY-MM-DD
    function formatDate(date) {
      var day = date.getDate();
      var month = date.getMonth() + 1;
      var year = date.getFullYear();

      // Ensure 2-digit formatting
      if (day < 10) {
        day = "0" + day;
      }
      if (month < 10) {
        month = "0" + month;
      }

      return year + "-" + month + "-" + day;
    }

    function resetAllInputs() {
      $("input").val("");

      // Reset all date inputs
      var dateInputs = document.querySelectorAll('input[type="date"]');
      // looping all the date inputs
      dateInputs.forEach(function (input) {
        input.value = formatDate(new Date());
      });

      // Resetting textarea
      $("textarea").val("");

      // Resetting select field selected option
      $("#lotNumbers").val(null).trigger("change");
      $("#productNames").val(null).trigger("change");
      $("#destinationLocation").val(null).trigger("change");
      $("#distributionLocation").val(null).trigger("change");
      $("#prodVehicleNumbers").val(null).trigger("change");
      $("#prodDriverNames").val(null).trigger("change");

      $("#productNames").select2({
        placeholder: "Choose a product",
        allowClear: true,
      });

      // Peeling
      $("#peeledLotNumbers").val(null).trigger("change");
      $("#peelingCenters").val(null).trigger("change");
      $("#rawMaterials").val(null).trigger("change");
      $(".peelingProductNames").val(null).trigger("change");
      $("#peelingMethods").val(null).trigger("change");

      $("#peelingCenters").select2({
        placeholder: "Choose a peeling center",
        allowClear: true,
      });
      $("#rawMaterials").select2({
        placeholder: "Choose a raw material",
        allowClear: true,
      });
      $(".peelingProductNames").select2({
        placeholder: "Choose a product",
        allowClear: true,
      });

      // Peeled Dispatch
      $("#peeledLotNumbers").val(null).trigger("change");
      $("#distributionLocation").val(null).trigger("change");
      $(".peeledProductNames").val(null).trigger("change");

      //Packing
      $("#packingLotNumbers").val(null).trigger("change");
      $("#packingProductNames").val(null).trigger("change");
      $("#packingDistributionLocation").val(null).trigger("change");
      $("#packingGrade").val(null).trigger("change");
      $("#packingSize").val(null).trigger("change");
      $("#packingPackages").val(null).trigger("change");


      $("#packingProductNames").select2({
        placeholder: "Choose a product",
        allowClear: true,
      });
      $("#packingDistributionLocation").select2({
        placeholder: "Choose a production center",
        allowClear: true,
      });
      $("#packingGrade").select2({
        placeholder: "Choose a Grade",
        allowClear: true,
      });
      $("#packingSize").select2({
        placeholder: "Choose a Size",
        allowClear: true,
      });

      $("#packingSize").select2({
        placeholder: "Choose a Package",
        allowClear: true,
      });

      $(`.peelingOutput:not(".peelingOutput_1")`).remove();
      $(`.vl-top:not(".vl-top-1")`).remove();

      is_updated_data = false;
    }

    function openSlidePanel(
      panelId,
      panelHeadingId,
      panelType,
      panelSubmitButton,
      panelBtnAttrName
    ) {
      // Opening Slide Panel
      $(`#${panelId}`).css("right", "0");

      // Changing panel Heading label
      $(`#${panelHeadingId}`).text(`Add ${panelType} Data`);

      // Changing panel save button label
      $(`#${panelSubmitButton}`).text("Save");

      // Changing panel save button attribute
      $(`#${panelSubmitButton}`).attr(panelBtnAttrName, null);
    }

    function closeSlidePanel(panelId) {
      // Opening Slide Panel
      $(`#${panelId}`).css("right", "-600px");

      // Resetting all the input fields' data
      resetAllInputs();

      // Destroying select2 all the dropdowns
      // $('select.select2-hidden-accessible').select2('destroy');
    }

    // Getting data for progress bars
    function loadPercentages() {
      $.ajax({
        url: "/api/v1/procurement/lot/count/stats",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          // Progress Bar function

          // Calculating Dispatch Percentage
          const procurement_percentage =
            data?.data?.total_purchased_weight || 0;
          const dispatch_percentage =
            data?.data?.total_dispatched_weight || 0;
          const peeled_percentage = data?.data?.total_peeled_weight || 0;
          const peeled_dispatch_percentage =
            data?.data?.total_peeled_dispatched_weight || 0;
          const packing_percentage = data?.data?.total_packed_weight || 0;

          changePercentage(
            "dispatchMenu",
            "dispatchCircle",
            "dispatchPercentage",
            null,
            "dispatchWeight",
            parseInt((dispatch_percentage / procurement_percentage) * 100) ||
            0,
            dispatch_percentage
          );
          changePercentage(
            "preprocessingMenu",
            "preprocessingCircle",
            "preprocessingPercentage",
            "preprocessingHR",
            "preprocessingWeight",
            parseInt((peeled_percentage / dispatch_percentage) * 100) || 0,
            peeled_percentage
          );
          changePercentage(
            "peeledDispatchMenu",
            "peeledDispatchCircle",
            "peeledDispatchPercentage",
            "peeledDispatchHR",
            "peeledDispatchWeight",
            parseInt(
              (peeled_dispatch_percentage / peeled_percentage) * 100
            ) || 0,
            peeled_dispatch_percentage
          );

          changePercentage(
            "packingMenu",
            "packingCircle",
            "packingPercentage",
            "packingHR",
            "packingWeight",
            parseInt(
              (packing_percentage / peeled_dispatch_percentage) * 100
            ) || 0,
            packing_percentage
          );
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    // Open Location on load (default)
    $(".menu-container").addClass("d-none");

    $(".dispatchContainer").removeClass("d-none");
    $(".dispatchContainer").addClass("d-block");

    resetAllInputs();
    loadPercentages();
    loadDropdowns();
    loadDispatchTableData();

    // ---------------------------------------------------------
    // ----------------------- Dispatches ----------------------
    // ---------------------------------------------------------

    // // Open panel
    $("#openDispatchPanelBtn").click(function () {
      // $("#dispatchModal").modal("show");
      openSlidePanel(
        "dispatchSlideInPanel",
        "dispatchPanelHeading",
        "Dispatch",
        "submitDispatch",
        "dispatch_id"
      );

      $("#balance_procure_quantity").text("").css({ color: "white" });
    });

    // Close panel
    $("#closeDispatchPanelBtn").click(function () {
      closeSlidePanel("dispatchSlideInPanel");

      view_procurement_product_id = "";
      view_dispatch_id = "";
    });

    $(".dispatchMenu").click(async function () {
      $(".menu-container").addClass("d-none");

      $(".dispatchContainer").removeClass("d-none");
      $(".dispatchContainer").addClass("d-block");

      // loadPercentages();
      loadDropdowns();
      loadDispatchTableData();
    });

    $(document).on(
      "click",
      ".modal-header .close, .modal-footer .close",
      () => {
        $("#dispatchModal").modal("hide");
      }
    );

    function loadDropdowns() {
      // Pre loading dropdown data
      loadLotNumber();
      loadUnits();
      loadVehicles();
      loadDrivers();
    }

    $("#submitDispatch").click(function () {
      saveDispatch();
    });

    function loadDispatchTableData() {
      $("#dispatchTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: "/api/v1/procurement/lot/stats/dispatch",
          error: function (xhr, error, code) {
            $("#dispatchTable").DataTable().destroy();
            $("#dispatchTable").DataTable({ scrollX: true, ordering: false });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: "procurement_date" },
          { data: "procurement_lot" },
          { data: "total_purchased_quantity" },
          { data: "total_dispatched_count" },
          { data: "total_dispatched_quantity" },
        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa-solid fa-eye view viewDispatches" procurement_lot_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to view this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.procurement_date);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];

              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return day + "-" + month + "-" + date.getFullYear();
            },
          },
          {
            targets: [2],
            className: "text-left",
            render: function (data, type, row) {
              return `<span procurement_lot_id=${row?.id}>${data}</span>`;
            },
          },
          {
            targets: [3],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [4],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [5],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    $(document).on("click", ".viewDispatches", (e) => {
      // Changing panel input fields data
      $("#closeDispatchPanelBtn").click();

      // Changing panel input fields data
      const view_lot_no = $(e.target)
        .closest("tr")
        .children("td")
        .eq(2)
        .find("span")
        .attr("procurement_lot_id");

      const view_total_dispatches = $(e.target)
        .closest("tr")
        .children("td")
        .eq(5)
        .text();
      const view_total_dispatch_weight = $(e.target)
        .closest("tr")
        .children("td")
        .eq(5)
        .text();

      $("#view_lot_no").text(
        $(e.target).closest("tr").children("td").eq(2).text()
      );

      $("#view_lot_no").attr("procurement_lot_id", view_lot_no);

      $("#view_total_dispatches").text(view_total_dispatches);

      $("#view_total_dispatch_weight").text(view_total_dispatch_weight);

      // Opening Slied Panel
      $("#dispatchModal").modal("show");

      loadDispatchProductTableData(view_lot_no);
    });

    function loadDispatchProductTableData(lot_no) {
      if (!lot_no) {
        toastr["warning"]("Lot no should not be empty!");
      }
      $("#dispatchProductTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: `/api/v1/dispatch?procurement_lot_id=${lot_no}`,
          error: function (xhr, error, code) {
            $("#dispatchProductTable").DataTable().destroy();
            $("#dispatchProductTable").DataTable({
              scrollX: true,
              ordering: false,
            });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: null },
          { data: "pp.procurement_quantity" },
          { data: "dispatch_quantity" },
          { data: "temperature" },
          { data: "UnitMaster.unit_code" },
          { data: "VehicleMaster.vehicle_number" },
          { data: "DriverMaster.driver_name" },
          { data: "delivery_notes" },
          { data: "delivery_status" },
          { data: "created_at" },
        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa fa-pen-to-square edit editDispatch" dispatch_id=${row?.id || null
                } procurement_id=${row?.id
                } aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              return `<span procurement_product_id='${row["pp"]?.id
                }'>${row["pp"]?.["ProductMaster"]?.product_name
                }-${row["pp"]?.procurement_product_type}-${row[
                  "pp"
                ]?.["VendorMaster"]?.vendor_name?.replaceAll(" ", "")}</i>`;
            },
          },
          {
            targets: [5],
            className: "text-left",
            render: function (data, type, row) {
              return `<span unit_master_id='${row["UnitMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [6],
            className: "text-left",
            render: function (data, type, row) {
              return `<span vehicle_master_id='${row["VehicleMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [7],
            className: "text-left",
            render: function (data, type, row) {
              return `<a href="tel:${row["DriverMaster"]?.phone?.startsWith("91")
                ? `+${row["DriverMaster"]?.phone}`
                : row["DriverMaster"]?.phone?.startsWith("+91")
                  ? row["DriverMaster"]?.phone
                  : `+91${row["DriverMaster"]?.phone}`
                }" driver_master_id='${row["DriverMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [9],
            className: "text-left",
            render: (data, type, row) => {
              return `<span class=${data == "In Transit" ? "text-warning" : "text-success"
                }>${data} <i class="fa-solid ${data == "In Transit"
                  ? "fa-truck-fast fa-fade"
                  : "fa-circle-check"
                }"></i></span>`;
            },
          },
          {
            targets: [10],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.created_at);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];
              var hours = date.getHours();
              var minutes = date.getMinutes();
              var ampm = hours >= 12 ? "PM" : "AM";
              hours = hours % 12;
              hours = hours ? hours : 12; // Handle midnight (0 hours)
              minutes = minutes < 10 ? "0" + minutes : minutes;
              var strTime = hours + ":" + minutes + " " + ampm;
              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return (
                day + "-" + month + "-" + date.getFullYear() + " " + strTime
              );
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    let view_procurement_product_id = "";
    $(document).on("click", ".editDispatch", (e) => {
      // Changing panel input fields data

      view_dispatch_id = $(e.target).attr("dispatch_id");

      $("#lotNumbers")
        .val($("#view_lot_no").attr("procurement_lot_id"))
        .trigger("change");

      view_procurement_product_id = $(e.target)
        .closest("tr")
        .children("td")
        .eq(1)
        .find("span")
        .attr("procurement_product_id");

      $("#productNames").val(view_procurement_product_id).trigger("change");

      $("#dispatch_quantity").val(
        $(e.target).closest("tr").children("td").eq(3).text()
      );

      $("#dispatch_temperature").val(
        $(e.target).closest("tr").children("td").eq(4).text()
      );

      $("#destinationLocation")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(5)
            .find("span")
            .attr("unit_master_id")
        )
        .trigger("change");

      $("#vehicleNumbers")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(6)
            .find("span")
            .attr("vehicle_master_id")
        )
        .trigger("change");

      $("#driverNames")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(7)
            .find("a")
            .attr("driver_master_id")
        )
        .trigger("change");

      $("#delivery_notes").val(
        $(e.target).closest("tr").children("td").eq(8).text()
      );

      // Opening Slied Panel
      $("#openDispatchPanelBtn").click();

      // Changing panel heading
      $("#dispatchPanelHeading").text("Edit Dispatch Data");

      // Changing panel button label
      $("#submitDispatch").text("Update");

      // Changing panel button attribute
      $("#submitDispatch").attr("dispatch_id", view_dispatch_id);

      $("#dispatchModal").modal("hide");
    });

    function loadLotNumber() {
      $.ajax({
        url: `/api/v1/procurement/lot/lots`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#lotNumbers").select2({
            placeholder: "Choose a lot",
            allowClear: "true",
            data: $.map(data?.data, function (item) {
              return {
                id: item.id,
                text: item.procurement_lot,
              };
            }),
          });

          $("#lotNumbers").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $(document).on("change", "#lotNumbers", () => {
      $("#balance_procure_quantity").text("");

      let lot_no = $("#lotNumbers").val();

      $("#productNames").empty();

      if (lot_no) {
        loadProducts(lot_no);
      }
    });

    function loadProducts(lot_no) {
      $("#productNames").empty();

      if (!lot_no) {
        toastr["warning"]("Invalid lot number!");
        return;
      }

      $.ajax({
        url: `/api/v1/procurement/product/names?procurement_lot_id=${lot_no}&dispatch_id=${view_dispatch_id || null
          }`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#productNames").select2({
            placeholder: "Choose a product",
            allowClear: "true",
            data: $.map(data?.data, function (item) {
              return {
                id: item.id,
                quantity:
                  (parseFloat(item?.procurement_quantity) || 0) -
                  (parseFloat(item?.dispatched_quantity) || 0),
                text: `${item?.ProductMaster?.product_name}-${item?.procurement_product_type
                  }-${item?.VendorMaster?.vendor_name?.replaceAll(" ", "")}`,
              };
            }),
          });

          // if (view_procurement_product_id) {
          //   $("#productNames")
          //     .val(view_procurement_product_id)
          //     .trigger("change");
          // } else {
          $("#productNames").val(null).trigger("change");
          // }

          if (view_procurement_product_id) {
            $("#productNames")
              .val(view_procurement_product_id)
              .trigger("change");
          }
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    let balance_procure_quantity = 0;
    $(document).on("change", "#productNames", () => {
      $("#balance_procure_quantity").text("");

      if ($("#productNames").val()) {
        balance_procure_quantity =
          $("#productNames").select2("data")[0]?.quantity;

        if (!isNaN(balance_procure_quantity)) {
          $("#balance_procure_quantity").text(
            parseFloat(balance_procure_quantity)
          );

          $("#balance_procure_quantity").css({ color: "white" });
        }

        $("#dispatch_quantity").keyup();
      }
    });

    $(document).on("keyup", "#dispatch_quantity", (e) => {
      const currentDispatchedQuantity = $(e.target).val();
      const procurementQuantity = parseFloat(
        $("#productNames").select2("data")[0]?.quantity
      );

      if (!currentDispatchedQuantity) {
        $("#balance_procure_quantity").text(balance_procure_quantity);
        $("#balance_procure_quantity").css({ color: "white" });
        return;
      }

      let balanceQuantity = procurementQuantity - currentDispatchedQuantity;

      $("#balance_procure_quantity").text(
        !isNaN(balanceQuantity) ? balanceQuantity : currentDispatchedQuantity
      );

      if (balanceQuantity > 0) {
        $("#balance_procure_quantity").css({ color: "yellow" });
      } else {
        $("#balance_procure_quantity").css({ color: "red" });
      }
    });

    function loadUnits() {
      $.ajax({
        url: "/api/v1/master/unit?unit_type=Peeling Center",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#destinationLocation").select2({
            placeholder: "Choose a destination",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.unit_code,
              };
            }),
          });

          $("#destinationLocation").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function loadVehicles() {
      $.ajax({
        url: "/api/v1/master/vehicle",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#vehicleNumbers").select2({
            placeholder: "Choose a vehicle",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.vehicle_number,
              };
            }),
          });

          $("#vehicleNumbers").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function loadDrivers() {
      $.ajax({
        url: "/api/v1/master/driver",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#driverNames").select2({
            placeholder: "Choose a driver",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.driver_name,
              };
            }),
          });

          $("#driverNames").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function saveDispatch() {
      const dispatch_id = $("#submitDispatch").attr("dispatch_id");
      const current_weight_balance = $("#balance_procure_quantity").text();

      if (parseFloat(current_weight_balance) <= -1) {
        toastr["warning"]("Invalid dispatch quantity");
        return;
      }

      let url = "/api/v1/dispatch";
      let method = "POST"
      let input_params = {
        procurement_product_id: $("#productNames").val(),
        unit_master_id: $("#destinationLocation").val(),
        dispatch_quantity: $("#dispatch_quantity").val(),
        temperature: $("#dispatch_temperature").val(),
        vehicle_master_id: $("#vehicleNumbers").val(),
        driver_master_id: $("#driverNames").val(),
        delivery_notes: $("#delivery_notes").val(),
      };

      if (dispatch_id && dispatch_id != "null") {
        url = "/api/v1/dispatch";
        method = "PUT"

        input_params = {
          dispatch_id,
          dispatch_data: {
            ...input_params,
          },
        };
      }

      $.ajax({
        url,
        method,
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(input_params),
        crossDomain: true,
        processData: false,
        success: (data) => {
          toastr["success"](data?.message);

          $("#closeDispatchPanelBtn").click();

          loadPercentages();

          loadDispatchTableData();

          resetAllInputs();
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $("#resetDispatchDataBtn").on("click", resetAllInputs);
    // -------------------- End of Dispatch -----------------

    // ---------------------------------------------------------
    // ----------------------- Peelings ------------------------
    // ---------------------------------------------------------

    // // Open panel
    $("#openPeelingPanelBtn").click(function () {
      // $("#peelingModal").modal("show");
      openSlidePanel(
        "peelingSlideInPanel",
        "peelingPanelHeading",
        "Peeling",
        "submitPeeling",
        "peeling_id"
      );

      $("#balance_dispatched_quantity").text("").css({ color: "white" });

      $("#smarttab").smartTab("first");
    });

    // Close panel
    $("#closePeelingPanelBtn").click(function () {
      closeSlidePanel("peelingSlideInPanel");

      view_peeling_center_id = "";
      view_raw_material_id = "";
    });

    $(".peelingMenu").click(async function () {
      $(".menu-container").addClass("d-none");

      $(".peelingContainer").removeClass("d-none");
      $(".peelingContainer").addClass("d-block");

      // loadPercentages();
      loadPeelingDropdowns();
      loadPeelingTableData();
    });

    $(document).on("click", ".modal-header .close", () => {
      $("#peelingModal").modal("hide");
    });

    $(document).on(
      "click",
      ".modal-header .close, .modal-footer .close",
      () => {
        $("#peelingModal").modal("hide");
      }
    );

    $(document).on("click", "#appendOutput", (e) => {
      const last_fieldset_index = $("#outputContainer fieldset").length;
      const next_fieldset_index = (last_fieldset_index || 0) + 1;

      if (!$(`.peelingProductNames_${last_fieldset_index}`).val()) {
        toastr["warning"](
          "Please fill all the required values in the above output to create a new output"
        );
        return;
      }

      addOutput(next_fieldset_index);
    });

    $(document).on("click", "#nextPeeling", (e) => {
      $("#smarttab").smartTab("next");
    });

    $(document).on(
      "showTab",
      "#smarttab",
      (e, anchorObject, tabIndex, tabDirection, tabPosition) => {
        if (tabIndex == 0) {
          $("#nextPeeling").show();
          $("#submitPeeling").removeClass("col-lg-5");
          $("#resetPeelingDataBtn").removeClass("col-lg-5");
        } else {
          $("#nextPeeling").hide();
          $("#submitPeeling").addClass("col-lg-5");
          $("#resetPeelingDataBtn").addClass("col-lg-5");
        }
      }
    );

    function loadPeelingDropdowns() {
      // Peeling Dropdown
      loadPeelingLotNumber();

      loadPeelingMethods();
    }

    function addOutput(
      index,
      peeled_product_id,
      product_master_id,
      yield_quantity,
      peeling_notes
    ) {
      $(
        "#outputContainer"
      ).append(`<div class="vl-top vl-top-${index}"></div><fieldset
                                class="form-group border p-3 mt-3 peelingOutput peelingOutput_${index}"
                                style="
                                  border-color: rgba(129, 145, 179, 0.6) !important;
                                  margin-top: 2.2rem !important;
                                "
                              >
                                <legend class="mb-2 w-auto px-2">Output ${index}</legend>
                                <div class="form-group">
                                  <label for="product_name">Product Name:</label>
                                  <select
                                    class="form-control input-dropdown w-100 peelingProductNames peelingProductNames_${index}"
                                    peeled_product_id=${peeled_product_id}
                                    name="peelingProductNames"
                                  ></select>
                                </div>

                                <div class="form-group mt-4">
                                  <label for="yield_quantity">Yield Quantity</label>
                                  <input
                                    class="form-control yield_quantity yield_quantity_${index}"
                                    type="number"
                                    placeholder="eg. 10"
                                    name="yield_quantity"
                                    required
                                  />
                                </div>

                                <div class="form-group mt-4 mb-4">
                                  <label for="peeling_notes">Peeling Notes</label>
                                  <textarea
                                    row="3"
                                    class="form-control input-dropdown w-100 peeling_notes peeling_notes_${index}"
                                    name="peeling_notes"
                                  ></textarea>
                                </div>

                              </fieldset>`);

      $(`.peelingProductNames_${index}`).select2({
        placeholder: "Choose a product",
        allowClear: true,
        data: productNamesArray,
      });

      $(`.peelingProductNames_${index}`)
        .val(product_master_id || null)
        .trigger("change");

      $(`.yield_quantity_${index}`).val(yield_quantity || "");

      $(`.peeling_notes_${index}`).val(peeling_notes || "");
    }

    $("#submitPeeling").click(function () {
      savePeeling();
    });

    function loadPeelingTableData() {
      $("#peelingTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: "/api/v1/procurement/lot/stats/peeling",
          error: function (xhr, error, code) {
            $("#peelingTable").DataTable().destroy();
            $("#peelingTable").DataTable({ scrollX: true, ordering: false });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: "procurement_date" },
          { data: "procurement_lot" },
          { data: "total_dispatched_quantity" },
          { data: "total_peeled_count" },
          { data: "total_peeled_quantity" },
          { data: "total_yield_quantity" },
          { data: null },
        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa-solid fa-eye view viewPeeling" procurement_lot_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.procurement_date);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];

              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return day + "-" + month + "-" + date.getFullYear();
            },
          },
          {
            targets: [2],
            className: "text-left",
            render: function (data, type, row) {
              return `<span procurement_lot_id=${row?.id}>${data}</span>`;
            },
          },
          {
            targets: [3],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [4],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [5],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [6],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [7],
            className: "text-left",
            render: function (data, type, row) {
              const peeling_quantity = parseFloat(
                row["total_peeled_quantity"]
              );
              const yield_quantity = parseFloat(row["total_yield_quantity"]);
              const wastage_quantity = peeling_quantity - yield_quantity;
              return isNaN(wastage_quantity) ? 0 : wastage_quantity;
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    $(document).on("click", ".viewPeeling", (e) => {
      // Changing panel input fields data
      $("#closePeelingPanelBtn").click();

      // Changing panel input fields data
      const view_procurement_lot_id = $(e.target).attr("procurement_lot_id");

      const view_total_peeling = $(e.target)
        .closest("tr")
        .children("td")
        .eq(4)
        .text();

      const view_total_peeling_weight = $(e.target)
        .closest("tr")
        .children("td")
        .eq(5)
        .text();

      $("#view_peeling_lot_no").text(
        $(e.target).closest("tr").children("td").eq(2).text()
      );

      // Top Header
      $("#view_peeling_lot_no").attr(
        "procurement_lot_id",
        view_procurement_lot_id
      );

      $("#view_total_peelinges").text(view_total_peeling);

      $("#view_total_peeling_weight").text(view_total_peeling_weight);

      // Opening Slied Panel
      $("#peelingModal").modal("show");

      loadPeelingProductTableData(view_procurement_lot_id);
    });

    let peelingProductTable;
    function loadPeelingProductTableData(procurement_lot_id) {
      if (!procurement_lot_id) {
        toastr["warning"]("Procurement lot data should not be empty!");
      }

      peelingProductTable = $("#peelingProductTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: `/api/v1/peeling?procurement_lot_id=${procurement_lot_id}`,
          error: function (xhr, error, code) {
            $("#peelingProductTable").DataTable().destroy();
            $("#peelingProductTable").DataTable({
              scrollX: true,
              ordering: false,
            });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: null },
          { data: "PeelingProducts" },
          { data: null },
          { data: "dis.dispatch_quantity" },
          { data: "peeling_quantity" },
          { data: "total_yield_quantity" },
          { data: null },
          { data: "peeling_method" },
          { data: "UnitMaster.unit_code" },
          { data: "created_at" },
        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa fa-pen-to-square edit editPeeling" peeling_id=${row?.id || null
                } aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              return `<span dispatch_id='${row["dis"]?.id}'>${row?.["dis"]?.["pp"]?.["ProductMaster"]?.product_name}-${row?.["dis"]?.["pp"]?.procurement_product_type}-${row?.["dis"]?.["pp"]?.["VendorMaster"]?.vendor_name}-${row?.["dis"]?.dispatch_quantity}</i>`;
            },
          },
          {
            targets: [2],
            className: "text-left",
            render: function (data, type, row) {
              return `<span style="cursor:pointer;color:blue" class="peeling_product_list" peeling_products_data='${JSON.stringify(
                data
              )}'>${data ? "Show" : "-"}</i>`;
            },
          },
          {
            targets: [3],
            className: "text-left",
            render: function (data, type, row) {
              return `<span>${row["PeelingProducts"]?.length || 0}</i>`;
            },
          },
          {
            targets: [6],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [7],
            className: "text-left",
            render: function (data, type, row) {
              const peeling_quantity = parseFloat(row["peeling_quantity"]);
              const yield_quantity = parseFloat(row["total_yield_quantity"]);
              const wastage_quantity = peeling_quantity - yield_quantity;
              return yield_quantity
                ? isNaN(wastage_quantity)
                  ? 0
                  : wastage_quantity
                : "-";
            },
          },
          // {
          //   targets: [8],
          //   className: "text-left",
          //   render: function (data, type, row) {
          //     return `<span class=${
          //       data == "In Progress" ? "text-warning" : "text-success"
          //     }>${data} <i class="fa-solid ${
          //       data == "In Progress"
          //         ? "fa-spinner fa-spin"
          //         : "fa-circle-check"
          //     }"></i></span>`;
          //   },
          // },
          {
            targets: [9],
            className: "text-left",
            render: function (data, type, row) {
              return `<span unit_master_id='${row["UnitMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [10],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.created_at);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];
              var hours = date.getHours();
              var minutes = date.getMinutes();
              var ampm = hours >= 12 ? "PM" : "AM";
              hours = hours % 12;
              hours = hours ? hours : 12; // Handle midnight (0 hours)
              minutes = minutes < 10 ? "0" + minutes : minutes;
              var strTime = hours + ":" + minutes + " " + ampm;
              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return (
                day + "-" + month + "-" + date.getFullYear() + " " + strTime
              );
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    $(document).on("click", "td span.peeling_product_list", function (e) {
      let tr = e.target.closest("tr");
      let row = peelingProductTable.row(tr);

      if (row.child.isShown()) {
        // This row is already open - close it
        row.child.hide();
        $(e.target).text("Show");
      } else {
        // Open this row
        row
          .child(
            format(
              $(e.target).parent().find("span").attr("peeling_products_data")
            )
          )
          .show();
        $(e.target).text("Hide");
      }
    });

    // Formatting function for row details - modify as you need
    function format(product_data) {
      // `d` is the original data object for the row
      let html_content = "";

      JSON.parse(product_data)?.forEach((row) => {
        html_content += `<tr>
                              <td>${row["ProductMaster"]?.product_name}</td>
                              <td>${row?.yield_quantity}</td>
                              <td><span class=${row?.peeling_status == "In Progress"
            ? "text-warning"
            : "text-success"
          }>${row?.peeling_status} <i class="fa-solid ${row?.peeling_status == "In Progress"
            ? "fa-spinner fa-spin"
            : "fa-circle-check"
          }"></i></span></td>
                              <td>${row?.peeling_notes || "-"}</td>
                            </tr>`;
      });

      return `<table class="table border rounded nowrap w-50">
                          <tbody>
                            <tr>
                              <th class="fw-bold">Product Name</th>
                              <th class="fw-bold">Yield Quantity</th>
                              <th class="fw-bold">Status</th>
                              <th class="fw-bold">Peeling Notes</th>
                            </tr>
                            ${html_content}
                          </tbody>
                        </table>`;
    }

    let view_peeling_center_id = "";
    let view_raw_material_id = "";
    $(document).on("click", ".editPeeling", (e) => {
      // Changing panel input fields data
      is_updated_data = true;

      $("#peelingLotNumbers")
        .val($("#view_peeling_lot_no").attr("procurement_lot_id"))
        .trigger("change");

      view_raw_material_id = $(e.target)
        .closest("tr")
        .children("td")
        .eq(1)
        .find("span")
        .attr("dispatch_id");

      view_peeling_center_id = $(e.target)
        .closest("tr")
        .children("td")
        .eq(9)
        .find("span")
        .attr("unit_master_id");

      $("#peeling_quantity").val(
        $(e.target).closest("tr").children("td").eq(5).text()
      );

      $("#peelingMethods")
        .val($(e.target).closest("tr").children("td").eq(8).text())
        .trigger("change");

      let peeling_products = $(e.target)
        .closest("tr")
        .children("td")
        .eq(2)
        .find("span")
        .attr("peeling_products_data");

      let peeling_products_obj = JSON.parse(peeling_products);
      if (
        peeling_products &&
        Array.isArray(peeling_products_obj) &&
        peeling_products_obj?.length > 0
      ) {
        let i = 1;

        peeling_products_obj?.forEach((product) => {
          if (i == 1) {
            $(".peelingProductNames_" + i)
              .val(product?.ProductMaster?.id)
              .trigger("change");
            $(".peelingProductNames_" + i)
              .parent()
              .find("select")
              .attr("peeled_product_id", product?.id);
            $(".yield_quantity_" + i).val(product?.yield_quantity);
            $(".peeling_notes_" + i).val(product?.peeling_notes);
          } else {
            addOutput(
              i,
              product?.id,
              product?.ProductMaster?.id,
              product?.yield_quantity,
              product?.peeling_notes
            );
          }
          i++;
        });
      }

      // Opening Slied Panel
      $("#openPeelingPanelBtn").click();

      // Changing panel heading
      $("#peelingPanelHeading").text("Edit Peeling Data");

      // Changing panel button label
      $("#submitPeeling").text("Update");

      // Changing panel button attribute
      $("#submitPeeling").attr("peeling_id", $(e.target).attr("peeling_id"));

      $("#peelingModal").modal("hide");
    });

    function loadPeelingLotNumber() {
      $.ajax({
        url: `/api/v1/procurement/lot/lots/dispatch`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#peelingLotNumbers").select2({
            placeholder: "Choose a lot",
            allowClear: "true",
            data: $.map(data?.data, function (item) {
              return {
                id: item.id,
                text: item.procurement_lot,
              };
            }),
          });

          $("#peelingLotNumbers").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $(document).on("change", "#peelingLotNumbers", () => {
      $("#balance_dispatched_quantity").text("");

      let lot_no = $("#peelingLotNumbers").val();

      $("#peelingCenters").empty();
      $("#rawMaterials").empty();
      $(".peelingProductNames").empty();
      productNamesArray = [];

      if (lot_no) {
        loadPeelingCenters(lot_no);
      }
    });

    function loadPeelingCenters(procurement_lot_id) {
      if (!procurement_lot_id) {
        toastr["warning"]("Lot number must not be empty");
        return
      }

      $.ajax({
        url:
          "/api/v1/master/unit/dispatch/destination?procurement_lot_id=" +
          procurement_lot_id,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#peelingCenters").select2({
            placeholder: "Choose a peeling center",
            allowClear: "true",
            data: $.map(data?.data, function (item) {
              return {
                id: item.id,
                text: item.unit_code,
              };
            }),
          });

          if (view_peeling_center_id) {
            $("#peelingCenters")
              .val(view_peeling_center_id)
              .trigger("change");
          } else {
            $("#peelingCenters").val(null).trigger("change");
          }
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $(document).on("change", "#peelingCenters", () => {
      $("#balance_dispatched_quantity").text("");

      let lot_no = $("#peelingLotNumbers").val();
      let unit_master_id = $("#peelingCenters").val();

      $("#rawMaterials").empty();
      $(".peelingProductNames").empty();
      productNamesArray = [];

      if (lot_no && unit_master_id) {
        loadPeelingRawMaterials(lot_no, unit_master_id);
      }
    });

    function loadPeelingRawMaterials(lot_no, unit_master_id) {
      if (!lot_no) {
        toastr["warning"]("Invalid lot number!");
        return;
      }

      if (!unit_master_id) {
        toastr["warning"]("Invalid Peeling center!");
        return;
      }

      $.ajax({
        url: `/api/v1/dispatch/names?procurement_lot_id=${lot_no}&unit_master_id=${unit_master_id}&peeling_id=${$("#submitPeeling").attr("peeling_id") || null}`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#rawMaterials").select2({
            placeholder: "Choose a raw material",
            allowClear: "true",
            data: $.map(data?.data, function (item) {
              return {
                id: item?.id,
                species_id:
                  item?.pp?.ProductMaster
                    .ProductCategoryMaster.species_master_id,
                quantity:
                  (parseFloat(item?.dispatch_quantity) || 0) -
                  (parseFloat(item?.peeling_quantity) || 0),
                text: `${item?.pp?.ProductMaster?.product_name
                  }-${item?.pp?.procurement_product_type
                  }-${item?.pp?.VendorMaster?.vendor_name?.replaceAll(
                    " ",
                    ""
                  )}-${item?.dispatch_quantity || 0}`,
              };
            }),
          });

          if (view_raw_material_id) {
            $("#rawMaterials").val(view_raw_material_id).trigger("change");
          } else {
            $("#rawMaterials").val(null).trigger("change");
          }
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $(document).on("change", "#rawMaterials", () => {
      if ($("#rawMaterials").val()) {
        $("#balance_dispatched_quantity").text("");

        $(".peelingProductNames").empty();
        productNamesArray = [];

        balance_dispatched_quantity =
          $("#rawMaterials").select2("data")[0]?.quantity;

        if (!isNaN(balance_dispatched_quantity)) {
          $("#balance_dispatched_quantity").text(
            parseFloat(balance_dispatched_quantity)
          );

          $("#balance_dispatched_quantity").css({ color: "white" });
        }

        $("#peeling_quantity").keyup();

        const species_id = $("#rawMaterials").select2("data")[0]?.species_id;
        loadPeelingProducts(species_id);
      }
    });

    let productNamesArray = [];
    function loadPeelingProducts(species_id) {
      $(".peelingProductNames").empty();
      productNamesArray = [];

      if (!species_id) {
        toastr["warning"]("Product data must not be empty");
      }

      $.ajax({
        url: "/api/v1/master/product?species_id=" + species_id,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          productNamesArray = [];

          data?.data?.rows.forEach((item) => {
            productNamesArray.push({
              id: item.id,
              text: item.product_name,
            });
          });

          $(".peelingProductNames").select2({
            placeholder: "Choose a product",
            allowClear: "true",
            data: productNamesArray,
          });

          if (!is_updated_data)
            $(".peelingProductNames").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $(document).on("keyup", "#peeling_quantity", (e) => {
      e.preventDefault();

      const currentPeelingQuantity = $(e.target).val();
      const procurementQuantity = parseFloat(
        $("#rawMaterials").select2("data")[0]?.quantity
      );

      if (!currentPeelingQuantity) {
        $("#balance_dispatched_quantity").text(balance_dispatched_quantity);
        $("#balance_dispatched_quantity").css({ color: "white" });
        return;
      }

      let balanceQuantity = procurementQuantity - currentPeelingQuantity;

      $("#balance_dispatched_quantity").text(
        !isNaN(balanceQuantity) ? balanceQuantity : currentPeelingQuantity
      );

      if (balanceQuantity > 0) {
        $("#balance_dispatched_quantity").css({ color: "yellow" });
      } else {
        $("#balance_dispatched_quantity").css({ color: "red" });
      }
    });

    function loadPeelingMethods() {
      $("#peelingMethods").select2({
        placeholder: "Choose a method",
        allowClear: "true",
        data: [
          {
            id: "Manual",
            text: "Manual",
          },
          {
            id: "Chemical",
            text: "Chemical",
          },
        ],
      });

      $("#peelingMethods").val(null).trigger("change");
    }

    function savePeeling() {
      const peeling_id = $("#submitPeeling").attr("peeling_id");
      const current_weight_balance = $("#balance_dispatched_quantity").text();
      const peeling_quantity = parseFloat($("#peeling_quantity").val()) || 0;
      let yield_quantity = 0;

      $(".yield_quantity").each((i, obj) => {
        yield_quantity += isNaN(parseFloat($(obj).val()))
          ? 0
          : parseFloat($(obj).val());
      });

      if (parseFloat(current_weight_balance) <= -1) {
        toastr["warning"]("Invalid peeling quantity");
        return;
      }

      let PeelingProducts = [];

      $(".peelingOutput").each((i, obj) => {
        let id = $(obj)
          .find(`.peelingProductNames_${i + 1}`)
          .parent()
          .find("select")
          .attr("peeled_product_id");

        let product_master_id = $(obj)
          .find(`.peelingProductNames_${i + 1}`)
          .val();

        let yield_quantity = $(obj)
          .find(`.yield_quantity_${i + 1}`)
          .val();

        yield_quantity = isNaN(parseFloat(yield_quantity))
          ? 0
          : parseFloat(yield_quantity);

        let peeling_notes = $(obj)
          .find(`.peeling_notes_${i + 1}`)
          .val();

        if (product_master_id) {
          let outputObj = {
            peeling_id,
            product_master_id,
            yield_quantity,
            peeling_notes,
          };

          if (id && id != "undefined") {
            outputObj.id = id;
          }

          PeelingProducts.push(outputObj);
        }
      });

      let url = "/api/v1/peeling";
      let method = "POST"
      let input_params = {
        dispatch_id: $("#rawMaterials").val(),
        product_master_id: $(".peelingProductNames").val(),
        unit_master_id: $("#peelingCenters").val(),
        peeling_method: $("#peelingMethods").val(),
        peeling_quantity,
        PeelingProducts,
      };

      if (peeling_id && peeling_id != "null") {
        url = "/api/v1/peeling";
        method = "PUT"

        input_params = {
          peeling_id,
          peeling_data: {
            ...input_params,
          },
        };
      }

      if (yield_quantity > 0 && peeling_quantity < yield_quantity) {
        toastr["warning"](
          "Yield quantity must not be greater than peeling quantity!"
        );
        return;
      }

      $.ajax({
        url,
        method,
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(input_params),
        crossDomain: true,
        processData: false,
        success: (data) => {
          toastr["success"](data?.message);

          $("#closePeelingPanelBtn").click();

          loadPercentages();

          loadPeelingTableData();

          resetAllInputs();
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $("#resetPeelingDataBtn").on("click", resetAllInputs);
    // -------------------- End of Peeling -----------------

    // -----------------------------------------------------------------
    // ----------------------- Peeled Dispatches -----------------------
    // -----------------------------------------------------------------

    // // Open panel
    $("#openPeeledDispatchPanelBtn").click(function () {
      // $("#dispatchModal").modal("show");
      openSlidePanel(
        "peeledDispatchSlideInPanel",
        "peeledDispatchPanelHeading",
        "Peeled Dispatch",
        "submitPeeledDispatch",
        "peeled_dispatch_id"
      );

      $("#balance_peeled_quantity").text("").css({ color: "white" });
    });

    // Close panel
    $("#closePeeledDispatchPanelBtn").click(function () {
      closeSlidePanel("peeledDispatchSlideInPanel");

      view_peeled_product_id = "";
      view_peeled_dispatch_id = "";
    });

    $(".peeledDispatchMenu").click(async function () {
      $(".menu-container").addClass("d-none");

      $(".peeledDispatchContainer").removeClass("d-none");
      $(".peeledDispatchContainer").addClass("d-block");

      // loadPercentages();
      loadPeeledDropdowns();
      loadPeeledDispatchTableData();
    });

    $(document).on(
      "click",
      ".modal-header .close, .modal-footer .close",
      () => {
        $("#peeledDispatchModal").modal("hide");
      }
    );

    function loadPeeledDropdowns() {
      // Pre loading dropdown data
      loadPeeledLotNumber();
      loadPeeledUnits();
      loadPeeledVehicles();
      loadPeeledDrivers();
    }

    $("#submitPeeledDispatch").click(function () {
      savePeeledDispatch();
    });

    function loadPeeledDispatchTableData() {
      $("#peeledDispatchTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: "/api/v1/procurement/lot/stats/peeled/dispatch",
          error: function (xhr, error, code) {
            $("#peeledDispatchTable").DataTable().destroy();
            $("#peeledDispatchTable").DataTable({
              scrollX: true,
              ordering: false,
            });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: "procurement_date" },
          { data: "procurement_lot" },
          { data: "total_yield_quantity" },
          { data: "total_peeled_dispatch_count" },
          { data: "total_peeled_dispatch_quantity" },
        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa-solid fa-eye view viewPeeledDispatches" procurement_lot_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.procurement_date);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];

              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return day + "-" + month + "-" + date.getFullYear();
            },
          },
          {
            targets: [2],
            className: "text-left",
            render: function (data, type, row) {
              return `<span procurement_lot_id=${row?.id}>${data}</span>`;
            },
          },
          {
            targets: [3],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [4],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [5],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    $(document).on("click", ".viewPeeledDispatches", (e) => {
      // Changing panel input fields data
      $("#closePeeledDispatchPanelBtn").click();

      // Changing panel input fields data
      const view_lot_no = $(e.target)
        .closest("tr")
        .children("td")
        .eq(2)
        .find("span")
        .attr("procurement_lot_id");

      const view_total_peeled_dispatches = $(e.target)
        .closest("tr")
        .children("td")
        .eq(5)
        .text();
      const view_total_peeled_dispatch_weight = $(e.target)
        .closest("tr")
        .children("td")
        .eq(3)
        .text();

      $("#view_peeled_dispatch_lot_no").text(
        $(e.target).closest("tr").children("td").eq(2).text()
      );

      $("#view_peeled_dispatch_lot_no").attr(
        "procurement_lot_id",
        view_lot_no
      );

      $("#view_total_peeled_dispatches").text(view_total_peeled_dispatches);

      $("#view_total_peeled_dispatch_weight").text(
        view_total_peeled_dispatch_weight
      );

      // Opening Slied Panel
      $("#peeledDispatchModal").modal("show");

      loadPeeledDispatchProductTableData(view_lot_no);
    });

    function loadPeeledDispatchProductTableData(lot_no) {
      if (!lot_no) {
        toastr["warning"]("Lot no should not be empty!");
      }
      $("#peeledDispatchProductTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: `/api/v1/peeled/dispatch?procurement_lot_id=${lot_no}`,
          error: function (xhr, error, code) {
            $("#peeledDispatchProductTable").DataTable().destroy();
            $("#peeledDispatchProductTable").DataTable({
              scrollX: true,
              ordering: false,
            });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: "pp.ProductMaster.product_name" },
          { data: "pp.yield_quantity" },
          { data: "peeled_dispatch_quantity" },
          { data: "temperature" },
          { data: "UnitMaster.unit_code" },
          { data: "VehicleMaster.vehicle_number" },
          { data: "DriverMaster.driver_name" },
          { data: "delivery_notes" },
          { data: "delivery_status" },
          { data: "created_at" },
        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa fa-pen-to-square edit editPeeledDispatch" peeled_dispatch_id=${row?.id || null
                } aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              return `<span peeled_product_id='${row["pp"]?.id}'>${data}-${row?.["pp"]?.yield_quantity}</i>`;
            },
          },
          {
            targets: [5],
            className: "text-left",
            render: function (data, type, row) {
              return `<span unit_master_id='${row["UnitMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [6],
            className: "text-left",
            render: function (data, type, row) {
              return `<span vehicle_master_id='${row["VehicleMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [7],
            className: "text-left",
            render: function (data, type, row) {
              return `<a href="tel:${row["DriverMaster"]?.phone?.startsWith("91")
                ? `+${row["DriverMaster"]?.phone}`
                : row["DriverMaster"]?.phone?.startsWith("+91")
                  ? row["DriverMaster"]?.phone
                  : `+91${row["DriverMaster"]?.phone}`
                }" driver_master_id='${row["DriverMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [8],
            className: "text-left",
            render: (data, type, row) => {
              return data || "-";
            },
          },
          {
            targets: [9],
            className: "text-left",
            render: (data, type, row) => {
              return `<span class=${data == "In Transit" ? "text-warning" : "text-success"
                }>${data} <i class="fa-solid ${data == "In Transit"
                  ? "fa-truck-fast fa-fade"
                  : "fa-circle-check"
                }"></i></span>`;
            },
          },
          {
            targets: [10],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.created_at);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];
              var hours = date.getHours();
              var minutes = date.getMinutes();
              var ampm = hours >= 12 ? "PM" : "AM";
              hours = hours % 12;
              hours = hours ? hours : 12; // Handle midnight (0 hours)
              minutes = minutes < 10 ? "0" + minutes : minutes;
              var strTime = hours + ":" + minutes + " " + ampm;
              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return (
                day + "-" + month + "-" + date.getFullYear() + " " + strTime
              );
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    let view_peeled_product_id = "";
    let view_peeled_dispatch_id = "";
    $(document).on("click", ".editPeeledDispatch", (e) => {
      // Changing panel input fields data

      view_peeled_dispatch_id = $(e.target).attr("peeled_dispatch_id");

      view_peeled_product_id = $(e.target)
        .closest("tr")
        .children("td")
        .eq(1)
        .find("span")
        .attr("peeled_product_id");

      $("#peeledLotNumbers")
        .val($("#view_peeled_dispatch_lot_no").attr("procurement_lot_id"))
        .trigger("change");

      // $("#peeledProductNames").val(view_peeled_product_id).trigger("change");

      // $("#peeledProductNames")
      //   .val(
      //     $(e.target)
      //       .closest("tr")
      //       .children("td")
      //       .eq(1)
      //       .find("span")
      //       .attr("peeled_dispatch_data")
      //   )
      //   .trigger("change");

      $("#peeled_dispatch_quantity").val(
        $(e.target).closest("tr").children("td").eq(3).text()
      );

      $("#peeled_dispatch_temperature").val(
        $(e.target).closest("tr").children("td").eq(4).text()
      );

      $("#distributionLocation")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(5)
            .find("span")
            .attr("unit_master_id")
        )
        .trigger("change");

      $("#prodVehicleNumbers")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(6)
            .find("span")
            .attr("vehicle_master_id")
        )
        .trigger("change");

      $("#prodDriverNames")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(7)
            .find("a")
            .attr("driver_master_id")
        )
        .trigger("change");

      $("#peeled_delivery_notes").val(
        $(e.target).closest("tr").children("td").eq(8).text()
      );

      // Opening Slide Panel
      $("#openPeeledDispatchPanelBtn").click();

      // Changing panel heading
      $("#peeledDispatchPanelHeading").text("Edit Dispatch Data");

      // Changing panel button label
      $("#submitPeeledDispatch").text("Update");

      // Changing panel button attribute
      $("#submitPeeledDispatch").attr(
        "peeled_dispatch_id",
        view_peeled_dispatch_id
      );

      $("#peeledDispatchModal").modal("hide");
    });

    function loadPeeledLotNumber() {
      $.ajax({
        url: `/api/v1/procurement/lot/lots/peeled`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#peeledLotNumbers").select2({
            placeholder: "Choose a lot",
            allowClear: true,
            data: $.map(data?.data, function (item) {
              return {
                id: item.id,
                text: item.procurement_lot,
              };
            }),
          });

          $("#peeledLotNumbers").val(null).trigger("change");

          // Call loadPeeledProducts here
          let lot_no = $("#peeledLotNumbers").val();
          if (lot_no) {
            loadPeeledProducts(lot_no);
          }
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $(document).on("change", "#peeledLotNumbers", () => {
      $("#balance_peeled_quantity").text("");

      let lot_no = $("#peeledLotNumbers").val();

      // $("#peelingCenters").empty();
      // $("#rawMaterials").empty();
      $("#peeledProductNames").empty();
      //productNamesArray = [];

      if (lot_no) {
        loadPeeledProducts(lot_no);
      }
    });

    let peeledProductNamesArray = [];
    function loadPeeledProducts(lot_no) {
      $("#peeledProductNames").empty();

      if (!lot_no) {
        toastr["warning"]("Invalid lot number!");
        return;
      }

      $.ajax({
        url: `/api/v1/peeling/product/names?procurement_lot_id=${lot_no}&peeled_dispatch_id=${view_peeled_dispatch_id || null
          }`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          peeledProductNamesArray = [];

          data?.data?.forEach((item) => {
            peeledProductNamesArray.push({
              id: item.id,
              product_master_id: item?.ProductMaster.id,
              quantity:
                (parseFloat(item?.yield_quantity) || 0) -
                (parseFloat(item?.peeled_quantity) || 0),
              text:
                item?.ProductMaster.product_name + "-" + item.yield_quantity,
            });
          });

          $("#peeledProductNames").select2({
            placeholder: "Choose a product",
            allowClear: true,
            data: peeledProductNamesArray,
          });

          if (view_peeled_product_id) {
            $("#peeledProductNames")
              .val(view_peeled_product_id)
              .trigger("change");
          } else {
            $("#peeledProductNames").val(null).trigger("change");
          }
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    let balance_peeled_quantity = 0;
    $(document).on("change", "#peeledProductNames", () => {
      $("#balance_peeled_quantity").text("");

      if ($("#peeledProductNames").val()) {
        balance_peeled_quantity = $("#peeledProductNames").select2("data")[0]
          ?.quantity;

        if (!isNaN(balance_peeled_quantity)) {
          $("#balance_peeled_quantity").text(
            parseFloat(balance_peeled_quantity)
          );

          $("#balance_peeled_quantity").css({ color: "white" });
        }

        $("#peeled_dispatch_quantity").keyup();
      }
    });

    $(document).on("keyup", "#peeled_dispatch_quantity", (e) => {
      const currentPeeledDispatchedQuantity = $(e.target).val();
      const peeledQuantity = parseFloat(
        $("#peeledProductNames").select2("data")[0]?.quantity
      );

      if (!currentPeeledDispatchedQuantity) {
        $("#balance_peeled_quantity").text(balance_peeled_quantity);
        $("#balance_peeled_quantity").css({ color: "white" });
        return;
      }

      let balancePeeledQuantity =
        peeledQuantity - currentPeeledDispatchedQuantity;

      $("#balance_peeled_quantity").text(
        !isNaN(balancePeeledQuantity)
          ? balancePeeledQuantity
          : currentPeeledDispatchedQuantity
      );

      if (balancePeeledQuantity > 0) {
        $("#balance_peeled_quantity").css({ color: "yellow" });
      } else {
        $("#balance_peeled_quantity").css({ color: "red" });
      }
    });

    function loadPeeledUnits() {
      $.ajax({
        url: "/api/v1/master/unit?unit_type=Distribution Center",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#distributionLocation").select2({
            placeholder: "Choose a destination",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.unit_code,
              };
            }),
          });

          $("#distributionLocation").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function loadPeeledVehicles() {
      $.ajax({
        url: "/api/v1/master/vehicle",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#prodVehicleNumbers").select2({
            placeholder: "Choose a vehicle",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.vehicle_number,
              };
            }),
          });

          $("#prodVehicleNumbers").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function loadPeeledDrivers() {
      $.ajax({
        url: "/api/v1/master/driver",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#prodDriverNames").select2({
            placeholder: "Choose a driver",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.driver_name,
              };
            }),
          });

          $("#prodDriverNames").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function savePeeledDispatch() {
      const peeled_dispatch_id = $("#submitPeeledDispatch").attr(
        "peeled_dispatch_id"
      );
      const current_weight_balance = $("#balance_peeled_quantity").text();

      if (parseFloat(current_weight_balance) <= -1) {
        toastr["warning"]("Invalid dispatch quantity");
        return;
      }

      let url = "/api/v1/peeled/dispatch";
      let method = "POST"
      let input_params = {
        peeled_product_id: $("#peeledProductNames").val(),
        unit_master_id: $("#distributionLocation").val(),
        peeled_dispatch_quantity: $("#peeled_dispatch_quantity").val(),
        temperature: $("#peeled_dispatch_temperature").val(),
        vehicle_master_id: $("#prodVehicleNumbers").val(),
        driver_master_id: $("#prodDriverNames").val(),
        delivery_notes: $("#peeled_delivery_notes").val(),
      };

      if (peeled_dispatch_id && peeled_dispatch_id != "null") {
        //if (peeled_product_id && peeled_product_id != "null") {
        url = "/api/v1/peeled/dispatch";
        method = "PUT"

        input_params = {
          peeled_dispatch_id,
          peeled_dispatch_data: {
            ...input_params,
          },
        };
      }

      $.ajax({
        url,
        method,
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(input_params),
        crossDomain: true,
        processData: false,
        success: (data) => {
          toastr["success"](data?.message);

          $("#closePeeledDispatchPanelBtn").click();

          loadPercentages();

          loadPeeledDispatchTableData();

          resetAllInputs();
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](
              jqXhr["responseJSON"]?.message || jqXhr["responseJSON"]
            );
          }
        },
      });
    }

    $("#resetPeeledDispatchDataBtn").on("click", resetAllInputs);
    // -------------------- End of PeeledDispatch -----------------

    // -----------------------------------------------------------------
    // --------------------------- Packing ------------------------------
    // -----------------------------------------------------------------

    // // Open panel
    $("#openPackingPanelBtn").click(function () {
      // $("#dispatchModal").modal("show");
      openSlidePanel(
        "packingSlideInPanel",
        "packingPanelHeading",
        "Packing",
        "submitPacking",
        "packing_id"
      );

      $("#balance_packed_quantity").text("").css({ color: "white" });
    });

    // Close panel
    $("#closePackingPanelBtn").click(function () {
      closeSlidePanel("packingSlideInPanel");

      view_packing_product_id = "";
      view_packing_id = "";
      view_packing_location_id = ""
    });

    $(".packingMenu").click(async function () {
      $(".menu-container").addClass("d-none");

      $(".packingContainer").removeClass("d-none");
      $(".packingContainer").addClass("d-block");

      // loadPercentages();
      loadPackingDropdowns();
      loadPackingTableData();
    });

    $(document).on(
      "click",
      ".modal-header .close, .modal-footer .close",
      () => {
        $("#packingModal").modal("hide");
      }
    );

    function loadPackingDropdowns() {
      // Pre loading dropdown data
      loadPackingLotNumber();
      loadPackingGrade();
      loadPackingSize();
      loadPackingPackage();
    }

    $("#submitPacking").click(function () {
      savePacking();
    });

    function loadPackingTableData() {
      $("#packingTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: "/api/v1/procurement/lot/stats/packing",
          error: function (xhr, error, code) {
            $("#packingTable").DataTable().destroy();
            $("#packingTable").DataTable({
              scrollX: true,
              ordering: false,
            });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: "peeling_date" },
          { data: "procurement_lot" },
          { data: "total_peeled_dispatched_quantity" },
          { data: "total_packing_count" },
          { data: "total_packing_quantity" },

        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa-solid fa-eye view viewPacking" procurement_lot_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.procurement_date);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];

              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return day + "-" + month + "-" + date.getFullYear();
            },
          },
          {
            targets: [2],
            className: "text-left",
            render: function (data, type, row) {
              return `<span procurement_lot_id=${row?.id}>${data}</span>`;
            },
          },
          {
            targets: [3],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [4],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
          {
            targets: [5],
            className: "text-left",
            render: function (data, type, row) {
              return data || 0;
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    $(document).on("click", ".viewPacking", (e) => {
      // Changing panel input fields data
      $("#closePackingPanelBtn").click();

      // Changing panel input fields data
      const view_packing_lot_no = $(e.target)
        .closest("tr")
        .children("td")
        .eq(2)
        .find("span")
        .attr("procurement_lot_id");

      const view_total_packing = $(e.target)
        .closest("tr")
        .children("td")
        .eq(4)
        .text();

      const view_total_packing_weight = $(e.target)
        .closest("tr")
        .children("td")
        .eq(5)
        .text();

      $("#view_packing_lot_no").text(
        $(e.target).closest("tr").children("td").eq(2).text()
      );

      $("#view_packing_lot_no").attr(
        "procurement_lot_id",
        view_packing_lot_no
      );

      $("#view_total_packing").text(view_total_packing);

      $("#view_total_packed_weight").text(
        view_total_packing_weight
      );

      // Opening Slied Panel
      $("#packingModal").modal("show");

      loadPackingProductTableData(view_packing_lot_no);
    });

    function loadPackingProductTableData(packing_lot_no) {
      if (!packing_lot_no) {
        toastr["warning"]("Lot no should not be empty!");
      }
      $("#packingProductTable").DataTable({
        // searching: true,
        destroy: true,
        responsive: false,
        processing: true,
        serverSide: true,
        scrollX: true,
        scrollCollapse: true,
        scrollY: "40vh",
        ordering: false,
        ajax: {
          type: "GET",
          url: `/api/v1/packing?procurement_lot_id=${packing_lot_no}`,
          error: function (xhr, error, code) {
            $("#packingProductTable").DataTable().destroy();
            $("#packingProductTable").DataTable({
              scrollX: true,
              ordering: false,
            });

            if (xhr["status"] == 420) {
              toastr["warning"](xhr["responseJSON"]["message"]);
            } else {
              toastr["error"](xhr["responseJSON"]["message"]);
            }
          },
          dataSrc: function (json) {
            json.iTotalRecords = json.data?.rows?.length;
            json.iTotalDisplayRecords = json.data?.count;

            // Return the data to be displayed in the DataTable
            return json?.data?.rows;
          },
        },
        columns: [
          { data: null },
          { data: "pd.pp.ProductMaster.product_name" },
          { data: "pd.peeled_dispatch_quantity" },
          { data: "packing_quantity" },
          { data: "UnitMaster.unit_code" },
          { data: "GradeMaster.grade_name" },
          { data: "SizeMaster.size" },
          { data: "PackagingMaster.packaging_code" },
          { data: "packing_notes" },
          { data: "packing_status" },
          { data: "created_at" },
        ],
        columnDefs: [
          {
            targets: [0],
            className: "text-left",
            render: function (data, type, row) {
              return `<i class="fa fa-pen-to-square edit editPacking" packing_id=${row?.id || null
                } aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
            },
          },
          {
            targets: [1],
            className: "text-left",
            render: function (data, type, row) {
              return `<span peeled_product_id='${row?.pd?.id}'>${data}</i>`;
              /*-${row?.["PeeledDispatches"]?.peeled_dispatch_quantity}</i>;*/
            },
          },

          {
            targets: [4],
            className: "text-left",
            render: function (data, type, row) {
              return `<span unit_master_id='${row["UnitMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [5],
            className: "text-left",
            render: function (data, type, row) {
              return `<span grade_master_id='${row["GradeMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [6],
            className: "text-left",
            render: function (data, type, row) {
              return `<span size_master_id='${row["SizeMaster"]?.id}'>${data}</i>`;
            },
          },
          {
            targets: [7],
            className: "text-left",
            render: function (data, type, row) {
              return `<span packaging_master_id='${row["PackagingMaster"]?.id}'>${data}</i>`;
            },
          },

          {
            targets: [8],
            className: "text-left",
            render: (data, type, row) => {
              return data || "-";
            },
          },
          {
            targets: [9],
            className: "text-left",
            render: (data, type, row) => {
              return `<span class=${data == "In Progress" ? "text-warning" : "text-success"
                }>${data} <i class="fa-solid ${data == "In Progress"
                  ? "fa-spinner fa-spin"
                  : "fa-circle-check"
                }"></i></span>`;
            },
          },
          {
            targets: [10],
            className: "text-left",
            render: function (data, type, row) {
              const date = new Date(row?.created_at);

              var months = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ];
              var hours = date.getHours();
              var minutes = date.getMinutes();
              var ampm = hours >= 12 ? "PM" : "AM";
              hours = hours % 12;
              hours = hours ? hours : 12; // Handle midnight (0 hours)
              minutes = minutes < 10 ? "0" + minutes : minutes;
              var strTime = hours + ":" + minutes + " " + ampm;
              var month = months[date.getMonth()];
              var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
              return (
                day + "-" + month + "-" + date.getFullYear() + " " + strTime
              );
            },
          },
        ],
        drawCallback: () => { },
      });
    }

    let view_packing_product_id = "";
    let view_packing_id = "";
    let view_packing_location_id = ""
    $(document).on("click", ".editPacking", (e) => {
      // Changing panel input fields data

      view_packing_id = $(e.target).attr("packing_id");

      view_packing_product_id = $(e.target)
        .closest("tr")
        .children("td")
        .eq(1)
        .find("span")
        .attr("peeled_product_id");

      view_packing_location_id = $(e.target)
        .closest("tr")
        .children("td")
        .eq(4)
        .find("span")
        .attr("unit_master_id");

      $("#packingLotNumbers")
        .val($("#view_packing_lot_no").attr("procurement_lot_id"))
        .trigger("change");

      $("#packing_quantity").val(
        $(e.target).closest("tr").children("td").eq(3).text()
      );

      $("#packingGrade")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(5)
            .find("span")
            .attr("grade_master_id")
        )
        .trigger("change");

      $("#packingSize")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(6)
            .find("span")
            .attr("size_master_id")
        )
        .trigger("change");

      $("#packingPackage")
        .val(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(7)
            .find("span")
            .attr("packaging_master_id")
        )
        .trigger("change");

      $("#packing_notes").val(
        $(e.target).closest("tr").children("td").eq(8).text()
      );

      // Opening Slide Panel
      $("#openPackingPanelBtn").click();

      // Changing panel heading
      $("#packingPanelHeading").text("Edit Packing Data");

      // Changing panel button label
      $("#submitPacking").text("Update");

      // Changing panel button attribute
      $("#submitPacking").attr(
        "packing_id",
        view_packing_id
      );

      $("#packingModal").modal("hide");
    });

    function loadPackingLotNumber() {
      $.ajax({
        url: `/api/v1/procurement/lot/lots/packing`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#packingLotNumbers").select2({
            placeholder: "Choose a lot",
            allowClear: true,
            data: $.map(data?.data, function (item) {
              return {
                id: item.id,
                text: item.procurement_lot,
              };
            }),
          });

          $("#packingLotNumbers").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    $(document).on("change", "#packingLotNumbers", () => {
      $("#balance_peeled_quantity").text("");

      let packing_lot_no = $("#packingLotNumbers").val();

      $("#packingProductNames").empty();
      $("#packingDistributionLocation").empty();
      packingProductNamesArray = []


      if (packing_lot_no) {
        loadPackingProductNames(packing_lot_no);
      }
    });

    let packingProductNamesArray = [];
    function loadPackingProductNames(packing_lot_no) {
      $("#packingProductNames").empty();

      if (!packing_lot_no) {
        toastr["warning"]("Invalid lot number!");
        return;
      }

      $.ajax({
        url: `/api/v1/peeled/dispatch/names?procurement_lot_id=${packing_lot_no}&packing_id=${view_packing_id || null
          }`,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          packingProductNamesArray = [];

          data?.data?.forEach((item) => {
            packingProductNamesArray.push({
              id: item.id,
              product_master_id: item?.pp?.ProductMaster.id,
              quantity:
                (parseFloat(item?.peeled_dispatch_quantity) || 0) -
                (parseFloat(item?.packed_quantity) || 0),
              text:
                item?.pp?.ProductMaster.product_name + "-" + item?.peeled_dispatch_quantity,
            });
          });

          $("#packingProductNames").select2({
            placeholder: "Choose a product",
            allowClear: true,
            data: packingProductNamesArray,
          });

          if (view_packing_product_id) {
            $("#packingProductNames")
              .val(view_packing_product_id)
              .trigger("change");
          } else {
            $("#packingProductNames").val(null).trigger("change");
          }
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    let balance_peeled_dispatch_quantity = 0;
    $(document).on("change", "#packingProductNames", () => {
      $("#balance_peeled_dispatch_quantity").text("");

      let lot_no = $("#packingLotNumbers").val();

      if ($("#packingProductNames").val()) {
        balance_peeled_dispatch_quantity = $("#packingProductNames").select2("data")[0]
          ?.quantity;

        if (!isNaN(balance_peeled_dispatch_quantity)) {
          $("#balance_peeled_dispatch_quantity").text(
            parseFloat(balance_peeled_dispatch_quantity)
          );

          $("#balance_peeled_dispatch_quantity").css({ color: "white" });
        }

        $("#packingDistributionLocation").empty();

        if (lot_no) {
          loadPackingUnits(lot_no);
        }

        $("#packing_quantity").keyup();
      }
    });

    $(document).on("keyup", "#packing_quantity", (e) => {
      const currentPackingQuantity = $(e.target).val();
      const peeledDispatchQuantity = parseFloat(
        $("#packingProductNames").select2("data")[0]?.quantity
      );

      if (!currentPackingQuantity) {
        $("#balance_packed_quantity").text(balance_peeled_dispatch_quantity);
        $("#balance_packed_quantity").css({ color: "white" });
        return;
      }

      let balancePeeledDispatchQuantity =
        peeledDispatchQuantity - currentPackingQuantity;

      $("#balance_packed_quantity").text(
        !isNaN(balancePeeledDispatchQuantity)
          ? balancePeeledDispatchQuantity
          : currentPackingQuantity
      );

      if (balancePeeledDispatchQuantity > 0) {
        $("#balance_packed_quantity").css({ color: "yellow" });
      } else {
        $("#balance_packed_quantity").css({ color: "red" });
      }
    });

    function loadPackingUnits(procurement_lot_id) {
      if (!procurement_lot_id) {
        toastr["warning"]("Lot number must not be empty");
        return
      }

      $.ajax({
        url: "/api/v1/master/unit/peeled/dispatch/destination?procurement_lot_id=" + procurement_lot_id,
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#packingDistributionLocation").select2({
            placeholder: "Choose a Production Center",
            allowClear: "true",
            data: $.map(data?.data, function (item) {
              return {
                id: item.id,
                text: item.unit_code,
              };
            }),
          });

          if (view_packing_location_id) {
            $("#packingDistributionLocation").val(view_packing_location_id).trigger("change");
          } else {
            $("#packingDistributionLocation").val(null).trigger("change");

          }
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function loadPackingGrade() {
      $.ajax({
        url: "/api/v1/master/grade",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#packingGrade").select2({
            placeholder: "Choose a Grade",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.grade_name,
              };
            }),
          });

          $("#packingGrade").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function loadPackingSize() {
      $.ajax({
        url: "/api/v1/master/size",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#packingSize").select2({
            placeholder: "Choose a size",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.size,
              };
            }),
          });

          $("#packingSize").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }

    function loadPackingPackage() {
      $.ajax({
        url: "/api/v1/master/packaging",
        method: "GET",
        dataType: "json",
        contentType: "application/json",
        crossDomain: true,
        processData: false,
        success: (data) => {
          $("#packingPackage").select2({
            placeholder: "Choose a package",
            allowClear: "true",
            data: $.map(data?.data?.rows, function (item) {
              return {
                id: item.id,
                text: item.packaging_code,
              };
            }),
          });

          $("#packingPackage").val(null).trigger("change");
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](jqXhr["responseJSON"]["message"]);
          }
        },
      });
    }


    function savePacking() {
      const packing_id = $("#submitPacking").attr(
        "packing_id"
      );
      const current_packing_weight_balance = $("#balance_peeled_dispatch_quantity").text();

      if (parseFloat(current_packing_weight_balance) <= -1) {
        toastr["warning"]("Invalid packing quantity");
        return;
      }

      let url = "/api/v1/packing";
      let method = "POST"
      let input_params = {
        peeled_dispatch_id: $("#packingProductNames").val(),
        packing_quantity: $("#packing_quantity").val(),
        unit_master_id: $("#packingDistributionLocation").val(),
        grade_master_id: $("#packingGrade").val(),
        size_master_id: $("#packingSize").val(),
        packaging_master_id: $("#packingPackage").val(),
        packing_notes: $("#packing_notes").val(),
      };

      if (packing_id && packing_id != "null") {
        //if (peeled_product_id && peeled_product_id != "null") {
        url = "/api/v1/packing";
        method = "PUT"

        input_params = {
          packing_id,
          packing_data: {
            ...input_params,
          },
        };
      }

      $.ajax({
        url,
        method,
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify(input_params),
        crossDomain: true,
        processData: false,
        success: (data) => {
          toastr["success"](data?.message);

          $("#closePackingPanelBtn").click();

          loadPercentages();

          loadPackingTableData();

          resetAllInputs();
        },
        error: (jqXhr, textStatus, errorThrown) => {
          if (jqXhr["status"] == 420) {
            toastr["warning"](jqXhr["responseJSON"]["message"]);
          } else {
            toastr["error"](
              jqXhr["responseJSON"]?.message || jqXhr["responseJSON"]
            );
          }
        },
      });
    }

    $("#resetPackingDataBtn").on("click", resetAllInputs);
    <!--End of Packing Container-->

    function changePercentage(
      main_id,
      circle_id,
      percentage_id,
      hr_id,
      weight_id,
      percent,
      weight
    ) {
      $(`#${circle_id}`).attr("data-percentage", percent);

      $(`#${percentage_id}`).text(`${percent}%`);

      $(`.${weight_id}`).text(weight);

      // Get radius of the svg's circle.complete
      radius = $(`#${circle_id}`).find($("circle.complete")).attr("r");
      // Get circumference (2πr)
      circumference = 2 * Math.PI * radius;
      // Get stroke-dashoffset value based on the percentage of the circumference
      strokeDashOffset = circumference - (percent * circumference) / 100;
      // Transition progress for 1.25 seconds
      $(`#${circle_id}`)
        .find($("circle.complete"))
        .animate({ "stroke-dashoffset": strokeDashOffset }, 1250);

      $(`#${percentage_id}`)
        .prop("Counter", 0)
        .animate(
          {
            Counter: $(`#${percentage_id}`).text(),
          },
          {
            duration: 2000,
            easing: "swing",
            step: function (now) {
              now = Number(Math.ceil(parseFloat(now))).toLocaleString("en");
              $(`#${percentage_id}`).text(`${now}%`);
            },
          }
        );

      $(`.${weight_id}`)
        .prop("Counter", 0)
        .animate(
          {
            Counter: $(`.${weight_id}`).text(),
          },
          {
            duration: 2000,
            easing: "swing",
            step: function (now) {
              now = Number(Math.ceil(parseFloat(now))).toLocaleString("en");
              $(`.${weight_id}`).text(`${now}`);
            },
          }
        );

      if (percent > 0) {
        $(`#${hr_id}`).css({ opacity: "0.8" });

        if (percent == 100) {
          $(`.${main_id}`)
            .find($("circle.complete"))
            .css({ stroke: "green" });
          $(`.${main_id}`).find("text").css({ fill: "green" });
          $(`.${main_id}`).find(".heading").css({ color: "green" });
          $(`.${main_id}`).find(".weight").css({ color: "green" });
        } else {
          if ($(`.${main_id}`).hasClass("topMenu-item-active")) {
            $(`.${main_id}`)
              .find($("circle.complete"))
              .css({ stroke: "#1f2d3e" });
            $(`.${main_id}`).find("text").css({ fill: "#1f2d3e" });
            // $(`.${main_id}`).find(".heading").css({ color: "#ea5455" });
            // $(`.${main_id}`).find(".weight").css({ color: "#ea5455" });
          } else {
            $(`.${main_id}`)
              .find($("circle.complete"))
              .css({ stroke: "#1f2d3e" });
            $(`.${main_id}`).find("text").css({ fill: "#1f2d3e" });
            // $(`.${main_id}`).find(".heading").css({ color: "#1f2d3e" });
            // $(`.${main_id}`).find(".weight").css({ color: "#1f2d3e" });
          }
        }
      } else {
        $(`#${hr_id}`).css({ opacity: "0.2" });
      }
    }
  });
</script>

</html>