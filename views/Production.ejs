<!-- @format -->

<!DOCTYPE html>
<html lang="en">
  <!-- title logo -->
  <link rel="icon" href="/public/images/bse.png" type="image/icon type" />

  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
  />

  <!-- Bootstrap  -->
  <link
    href="/public/plugins/bootstrap/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <script src="/public/plugins/bootstrap/js/bootstrap.min.js"></script>

  <!-- MDB5  -->
  <link href="/public/plugins/MDB5-7.2.0/css/mdb.min.css" rel="stylesheet" />
  <script src="/public/plugins/MDB5-7.2.0/js/mdb.es.min.js"></script>

  <!-- jQuery -->
  <script src="/public/plugins/jquery/jquery.min.js"></script>

  <!-- Select2 -->
  <link rel="stylesheet" href="/public/plugins/select2/css/select2.min.css" />
  <script src="/public/plugins/select2/js/select2.min.js"></script>

  <!-- DataTable -->
  <link rel="stylesheet" href="/public/plugins/dataTables/datatables.min.css" />
  <script src="/public/plugins/dataTables/datatables.min.js"></script>
  <script src="/public/plugins/dataTables/dataTables.bootstrap5.min.js"></script>
  <!-- Responsive Datatable -->
  <link
    rel="stylesheet"
    href="/public/plugins/dataTables/datatables.responsive.min.css"
  />
  <script src="/public/plugins/dataTables/datatables.responsive.min.js"></script>

  <!-- Toast -->
  <link rel="stylesheet" href="/public/plugins/Toastr/toastr.min.css" />
  <script src="/public/plugins/Toastr/toastr.min.js"></script>

  <!-- perfect-scrollbar plugin -->
  <script src="/public/plugins/perfect-scrollbar/perfect-scrollbar.min.js"></script>

  <!-- Font Awesome -->
  <link rel="stylesheet" href="/public/plugins/font-awesome/css/all.min.css" />

  <!-- jQuery Confirm -->
  <link
    rel="stylesheet"
    href="/public/plugins/jquery-confirm/css/jquery-confirm.min.css"
  />
  <script src="/public/plugins/jquery-confirm/js/jquery-confirm.min.js"></script>

  <!-- Slide-in Panel -->
  <link
    rel="stylesheet"
    href="/public/plugins/slide-in-panel/css/slidePanel.min.css"
  />
  <script src="/public/plugins/slide-in-panel/js/slidePanel.min.js"></script>

  <!-- Tippy -->
  <link rel="stylesheet" href="/public/plugins/tippy/scale.css" />
  <script src="/public/plugins/tippy/popper.min.js"></script>
  <script src="/public/plugins/tippy/tippy-bundle.umd.min.js"></script>

  <!-- Circle ProgressBar -->
  <!-- <script
    src="https://code.jquery.com/jquery-3.3.1.min.js"
    integrity="sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT"
    crossorigin="anonymous"
  ></script> -->

  <!-- Custom CSS -->
  <link rel="stylesheet" href="/public/css/style.css" />

  <!-- Custom Script -->
  <script src="/public/custom/App.js"></script>

  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BSE</title>

    <style type="text/css">
      @font-face {
        font-family: "CassandraPersonalUse";
        src: url("/public/fonts/CassandraPersonalUse/CassandraPersonalUse-Regular.ttf?v=2")
          format("truetype");
      }

      @font-face {
        font-family: "CerebriSansPro-Regular";
        src: url("/public/fonts/CerebriSansPro/CerebriSansPro-Regular.ttf?v=2")
          format("truetype");
      }

      @font-face {
        font-family: "RedditMono-Regular";
        src: url("/public/fonts/RedditMono/RedditMono-Regular.ttf?v=2")
          format("truetype");
      }

      body {
        font-family: "CerebriSansPro-Regular";
        background-color: #f7f9fd;
      }

      .toast {
        opacity: 1 !important;
      }

      a,
      .edit,
      .view,
      .close,
      .del {
        cursor: pointer;
      }

      .panelClose {
        cursor: pointer;
      }

      .select2-dropdown {
        z-index: 10000 !important;
      }

      /* Table Pagination */
      .page-item.active .page-link {
        color: #fff !important;
        background-color: #ea5455 !important;
        border-color: #ea5455 !important;
      }

      .page-link {
        color: #000 !important;
        background-color: #fff !important;
        border: 1px solid #dee2e6 !important;
      }

      .page-link:hover {
        color: #fff !important;
        background-color: #f17979 !important;
        border-color: #ea5455 !important;
      }

      svg.radial-progress {
        height: auto;
        max-width: 100px;
        margin: 10px;
        transform: rotate(-90deg);
        width: 100%;
        /* padding-left: 0px; */
        /* padding-right: 0px; */
      }

      svg.radial-progress circle {
        fill: rgba(0, 0, 0, 0);
        stroke: #1f2d3e;
        stroke-dashoffset: 219.91148575129;
        stroke-width: 10;
      }

      svg.radial-progress circle.incomplete {
        opacity: 0.25;
      }

      svg.radial-progress circle.complete {
        stroke-dasharray: 219.91148575129;
      }

      svg.radial-progress text {
        fill: #1f2d3e;
        text-anchor: middle;
      }

      .topMenu-item {
        cursor: pointer;
      }

      .topMenu-item-active {
        /* box-shadow: 0 -2px 0 0 #ea5455; */
        color: #ea5455;
      }

      .topMenu-item:hover:not(.topMenu-item-active) {
        /* box-shadow: 0 -2px 0 0 #ea5455; */
        color: #ea5455;
      }

      #dispatchProductTable_wrapper {
        margin-top: 60px !important;
      }

      .slideInPanel {
        z-index: 9999;
        position: fixed;
        top: 0;
        bottom: 0;
        right: -600px;
        width: 400px;
        background-color: #1f2d3e;
        color: #e3e3e3;
        height: 90vh;
        /* box-shadow: 0 0 0px rgba(0, 0, 0, 0.2); */
        transition: right 0.3s ease;
        border-radius: 8px;
      }

      /* Input */
      .slideInPanel input {
        background-color: transparent;
        border-color: rgba(98, 114, 147, 0.6);
      }

      .slideInPanel input:focus {
        background-color: transparent;
      }

      .slideInPanel input:hover {
        border-color: #627293;
      }

      /* Select */
      .slideInPanel .select2-container {
        background-color: transparent !important;
        border-color: rgba(98, 114, 147, 0.6) !important;
        color: 627293 !important;
      }

      .select2-container {
        width: 100% !important;
      }

      .select2-selection__rendered,
      .select2-selection__clear,
      .select2-selection__arrow {
        color: white !important;
        margin-top: 0.25rem !important;
      }

      .select2-selection {
        background-color: transparent !important;
        border-color: rgba(98, 114, 147, 0.6) !important;
        height: 35px !important;
      }

      .slideInPanel .select:focus {
        background-color: transparent;
        border-color: #627293;
      }

      .slideInPanel .select2-container:hover {
        border-color: #627293;
      }

      /* TextArea */
      .slideInPanel textarea {
        background-color: transparent;
        border-color: rgba(98, 114, 147, 0.6);
      }

      .slideInPanel textarea:focus {
        background-color: transparent;
      }

      .slideInPanel textarea:hover {
        border-color: #627293;
      }

      /* Form Control */
      .slideInPanel .form-control {
        color: #f7f9fc;
      }

      .slideInPanel .form-control::placeholder {
        color: #627293;
      }

      .select2-selection::placeholder {
        color: #627293;
      }

      table.dataTable th {
        text-align: left !important;
      }

      /* Table */
      /* table.dataTable thead tr {  
        background-color: #1f2d3e;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      table.dataTable thead tr th {
        color: rgb(228, 228, 255);
      }

      table.dataTable tbody tr:hover:not(.dt-empty) {
        background-color: #ffe3e3;
      } */

      /* table.dataTable tbody tr:hover td {
        color: rgb(228, 228, 255);
      } */

      /* table.dataTable tbody tr:hover > .sorting_1 {
        background-color: #ffa;
      } */
      /* 
      table.dataTable tbody tr:nth-child(odd) td {
        background-color: white;
      }

      table.dataTable tbody tr:nth-child(even) {
        background-color: #ffcdd2;
      } */

      /* table.dataTable tbody tr:nth-child(even) td {
        color: white;
      } */
    </style>
  </head>

  <body>
    <div class="container-fluid">
      <div class="row d-flex justify-content-center">
        <div
          class="topMenu-item topMenu-item-active dispatchMenu col-lg-1 d-flex justify-content-center"
        >
          <div class="d-flex flex-column text-center align-items-center">
            <svg
              class="radial-progress"
              id="dispatchCircle"
              data-percentage="0"
              viewBox="0 0 80 80"
            >
              <circle class="incomplete" cx="40" cy="40" r="35"></circle>
              <circle
                class="complete"
                cx="40"
                cy="40"
                r="35"
                style="stroke-dashoffset: 0"
              ></circle>
              <text
                id="dispatchPercentage"
                class="percentage"
                x="50%"
                y="57%"
                transform="matrix(0, 1, -1, 0, 80, 0)"
              >
                0%
              </text>
            </svg>
            <div class="d-flex flex-column">
              <span class="heading fw-bold fs-6">Dispatch</span>
              <span
                style="font-family: sans-serif"
                class="fs-6 weight fw-bold dispatchWeight"
                style="font-weight: RedditMono-Regular"
                >0</span
              >
            </div>
          </div>
        </div>

        <div class="col-lg-1" style="padding-left: 0px; padding-right: 0px">
          <hr
            id="preprocessingHR"
            style="border: 3px solid #28394f; opacity: 0.2; margin-top: 64px"
          />
        </div>

        <div
          class="topMenu-item peelingMenu col-lg-1 d-flex justify-content-center"
        >
          <div class="d-flex flex-column text-center align-items-center">
            <svg
              class="radial-progress"
              id="preprocessingCircle"
              data-percentage="0"
              viewBox="0 0 80 80"
            >
              <circle class="incomplete" cx="40" cy="40" r="35"></circle>
              <circle
                class="complete"
                cx="40"
                cy="40"
                r="35"
                style="stroke-dashoffset: 0"
              ></circle>
              <text
                id="preprocessingPercentage"
                class="percentage"
                x="50%"
                y="57%"
                transform="matrix(0, 1, -1, 0, 80, 0)"
              >
                0%
              </text>
            </svg>
            <span class="heading fw-bold fs-6">Peeling</span>
            <span
              style="font-family: sans-serif"
              class="fs-6 weight fw-bold preprocessingWeight"
              style="font-weight: RedditMono-Regular"
              >0</span
            >
          </div>
        </div>

        <div class="col-lg-1" style="padding-left: 0px; padding-right: 0px">
          <hr
            id="preprocessingDispatchHR"
            style="border: 3px solid #28394f; opacity: 0.2; margin-top: 64px"
          />
        </div>

        <div
          class="topMenu-item preprocessingDispatchMenu col-lg-1 d-flex justify-content-center"
        >
          <div class="d-flex flex-column text-center align-items-center">
            <svg
              class="radial-progress"
              id="preprocessingDispatchCircle"
              data-percentage="0"
              viewBox="0 0 80 80"
            >
              <circle class="incomplete" cx="40" cy="40" r="35"></circle>
              <circle
                class="complete"
                cx="40"
                cy="40"
                r="35"
                style="stroke-dashoffset: 0"
              ></circle>
              <text
                id="preprocessingDispatchPercentage"
                class="percentage"
                x="50%"
                y="57%"
                transform="matrix(0, 1, -1, 0, 80, 0)"
              >
                0%
              </text>
            </svg>
            <span class="heading fw-bold fs-6">Dispatch</span>
            <span
              style="font-family: sans-serif"
              class="fs-6 weight fw-bold preprocessingDispatchWeight"
              style="font-weight: RedditMono-Regular"
              >0</span
            >
          </div>
        </div>

        <div class="col-lg-1" style="padding-left: 0px; padding-right: 0px">
          <hr
            id="packingHR"
            style="border: 3px solid #28394f; opacity: 0.2; margin-top: 64px"
          />
        </div>

        <div
          class="topMenu-item packingMenu col-lg-1 d-flex justify-content-center"
        >
          <div class="d-flex flex-column text-center align-items-center">
            <svg
              class="radial-progress"
              id="packingCircle"
              data-percentage="0"
              viewBox="0 0 80 80"
            >
              <circle class="incomplete" cx="40" cy="40" r="35"></circle>
              <circle
                class="complete"
                cx="40"
                cy="40"
                r="35"
                style="stroke-dashoffset: 0"
              ></circle>
              <text
                id="packingPercentage"
                class="percentage"
                x="50%"
                y="57%"
                transform="matrix(0, 1, -1, 0, 80, 0)"
              >
                0%
              </text>
            </svg>
            <span class="heading fw-bold fs-6">Packing</span>
            <span
              style="font-family: sans-serif"
              class="fs-6 weight fw-bold packingWeight"
              style="font-weight: RedditMono-Regular"
              >0</span
            >
          </div>
        </div>

        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <!-- ------------------------------------- Dispatch Container ---------------------------------------------------- -->
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <div class="menu-container dispatchContainer d-none">
          <!-- Slide-in Panel -->
          <div
            id="dispatchSlideInPanel"
            class="slideInPanel px-4 overflow-auto"
          >
            <div class="row d-flex justify-content-center">
              <div class="col-sm-12 col-md-12 col-md-12">
                <div class="text-center mt-4 d-flex justify-content-between">
                  <span id="dispatchPanelHeading" class="fw-bold fs-5"
                    >Add Dispatch Data</span
                  >
                  <div class="col my-auto d-flex justify-content-end">
                    <i
                      class="fa-solid fa-circle-xmark my-auto panelClose"
                      id="closeDispatchPanelBtn"
                    ></i>
                  </div>
                </div>

                <hr />

                <div class="form-group mt-4">
                  <label for="lot_no">Lot No:</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="lotNumbers"
                    name="lotNumbers"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="product_name">Product Name:</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="productNames"
                    name="productNames"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="destinationLocation">Destination</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="destinationLocation"
                    name="destinationLocation"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="dispatch_quantity">Quantity</label>
                  <input
                    id="dispatch_quantity"
                    class="form-control"
                    type="number"
                    placeholder="eg. 10"
                    name="dispatch_quantity"
                    required
                  />
                  <span style="font-size: 12px"
                    >Balance Purchased Quantity :
                    <span class="fw-bold" id="balance_procure_quantity"></span
                  ></span>
                </div>

                <div class="form-group mt-4">
                  <label for="dispatch_temperature">Temperature</label>
                  <input
                    id="dispatch_temperature"
                    class="form-control"
                    type="number"
                    placeholder="eg. 12.9"
                    name="dispatch_temperature"
                    required
                  />
                </div>

                <div class="form-group mt-4">
                  <label for="vehicleNumbers">Vehicle Number</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="vehicleNumbers"
                    name="vehicleNumbers"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="driverNames">Driver Name</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="driverNames"
                    name="driverNames"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="delivery_notes">Delivery Notes</label>
                  <textarea
                    row="3"
                    class="form-control input-dropdown w-100"
                    id="delivery_notes"
                    name="delivery_notes"
                  ></textarea>
                </div>

                <div class="d-flex justify-content-between mt-4 py-3 pb-4">
                  <div id="submitDispatch" class="col-lg-5 btn btn-danger">
                    Save
                  </div>
                  <div
                    id="resetDispatchDataBtn"
                    class="col-lg-5 btn btn-outline-danger"
                  >
                    Clear
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Table Content -->
          <div class="rounded-2 d-flex justify-content-center mt-4 py-4">
            <div class="border p-4 w-100">
              <!-- Add Button -->
              <div class="d-flex rounded-2 justify-content-end pb-4">
                <div
                  id="openDispatchPanelBtn"
                  class="btn btn-outline-danger d-flex justify-content-around"
                  style="width: 150px"
                >
                  <i class="fa-solid fa-circle-plus my-auto"></i>
                  <span style="margin-top: 4px" class="fw-bold my-auto"
                    >Dispatch</span
                  >
                </div>
              </div>

              <table
                id="dispatchTable"
                class="rounded table table-hover nowrap w-100"
              >
                <thead>
                  <tr>
                    <th style="border-radius: 4px 0 0 0"></th>
                    <th class="fw-bold"><span>Procurement Date</span></th>
                    <th class="fw-bold"><span>Procurement Lot</span></th>
                    <th class="fw-bold"><span>Total Products Items</span></th>
                    <th class="fw-bold"><span>Total Purchased Weight</span></th>
                    <th class="fw-bold">
                      <span>Total Dispatched Items</span>
                    </th>
                    <th class="fw-bold">
                      <span>Total Dispatched Weight</span>
                    </th>
                  </tr>
                </thead>
              </table>
            </div>
          </div>
        </div>

        <!-- modal-dialog-centered modal-dialog-scrollable -->
        <!-- Modal -->
        <div
          id="dispatchModal"
          class="modal hide fade modal-xl"
          tabindex="-1"
          role="dialog"
          aria-labelledby="myModalLabel"
          aria-hidden="true"
        >
          <div class="modal-dialog modal-dialog-scrollable">
            <!-- Modal content-->
            <div class="modal-content">
              <div class="modal-header">
                <h4 class="modal-title">Dispatched Products</h4>
                <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
                </i>
              </div>
              <div class="modal-body">
                <div class="d-flex justify-content-between">
                  <div class="form-group">
                    <label class="fw-bold" for="lot_no">Lot No:</label>
                    <span id="view_lot_no"></span>
                  </div>

                  <div class="form-group">
                    <label class="fw-bold" for="total_products"
                      >Total Dispatches:</label
                    >
                    <span id="view_total_dispatches"></span>
                  </div>

                  <div class="form-group">
                    <label class="fw-bold" for="total_weight"
                      >Total Weight:</label
                    >
                    <span id="view_total_dispatch_weight"></span>
                  </div>
                </div>

                <hr class="mb-4" />

                <table
                  id="dispatchProductTable"
                  class="rounded table table-hover nowrap w-100"
                >
                  <thead>
                    <tr>
                      <th style="border-radius: 4px 0 0 0"></th>
                      <th class="fw-bold"><span>Product Name</span></th>
                      <th class="fw-bold"><span>Purchased Quantity</span></th>
                      <th class="fw-bold"><span>Dispatched Quantity</span></th>
                      <th class="fw-bold"><span>Temperature</span></th>
                      <th class="fw-bold"><span>Destination</span></th>
                      <th class="fw-bold"><span>Vehicle Name</span></th>
                      <th class="fw-bold"><span>Driver Name</span></th>
                      <th class="fw-bold"><span>Delivery Notes</span></th>
                      <th class="fw-bold"><span>Delivery Status</span></th>
                      <th class="fw-bold"><span>Dispatched Date</span></th>
                    </tr>
                  </thead>
                </table>
              </div>
              <div class="modal-footer">
                <button
                  type="button"
                  class="close btn btn-default"
                  data-dismiss="modal"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Dispatch Container Ends -->

        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <!-- ------------------------------------- Peeling Container ---------------------------------------------------- -->
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <div class="menu-container peelingContainer d-none">
          <!-- Slide-in Panel -->
          <div id="peelingSlideInPanel" class="slideInPanel px-4 overflow-auto">
            <div class="row d-flex justify-content-center">
              <div class="col-sm-12 col-md-12 col-md-12">
                <div class="text-center mt-4 d-flex justify-content-between">
                  <span id="peelingPanelHeading" class="fw-bold fs-5"
                    >Add Peeling Data</span
                  >
                  <div class="col my-auto d-flex justify-content-end">
                    <i
                      class="fa-solid fa-circle-xmark my-auto panelClose"
                      id="closePeelingPanelBtn"
                    ></i>
                  </div>
                </div>

                <hr />

                <div class="form-group mt-4">
                  <label for="lot_no">Lot No:</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="peelingLotNumbers"
                    name="peelingLotNumbers"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="s">Peeling Center</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="peelingCenters"
                    name="peelingCenters"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="product_name">Product Name:</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="peelingProductNames"
                    name="peelingProductNames"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="rawMaterials">Raw Materials</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="rawMaterials"
                    name="rawMaterials"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="peeling_quantity">Quantity</label>
                  <input
                    id="peeling_quantity"
                    class="form-control"
                    type="number"
                    placeholder="eg. 10"
                    name="peeling_quantity"
                    required
                  />
                  <span style="font-size: 12px"
                    >Balance Dispatched Quantity :
                    <span
                      class="fw-bold"
                      id="balance_dispatched_quantity"
                    ></span
                  ></span>
                </div>

                <div class="form-group mt-4">
                  <label for="yield_quantity"
                    >Yield Quantity <code>(optional)</code></label
                  >
                  <input
                    id="yield_quantity"
                    class="form-control"
                    type="number"
                    placeholder="eg. 10"
                    name="yield_quantity"
                    required
                  />
                </div>

                <div class="form-group mt-4">
                  <label for="peeling_method">Peeling Method</label>
                  <select
                    class="form-control input-dropdown w-100"
                    id="peelingMethods"
                    name="peelingMethods"
                  ></select>
                </div>

                <div class="form-group mt-4">
                  <label for="peeling_notes">Peeling Notes</label>
                  <textarea
                    row="3"
                    class="form-control input-dropdown w-100"
                    id="peeling_notes"
                    name="peeling_notes"
                  ></textarea>
                </div>

                <div class="d-flex justify-content-between mt-4 py-3 pb-4">
                  <div id="submitPeeling" class="col-lg-5 btn btn-danger">
                    Save
                  </div>
                  <div
                    id="resetPeelingDataBtn"
                    class="col-lg-5 btn btn-outline-danger"
                  >
                    Clear
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Table Content -->
          <div class="rounded-2 d-flex justify-content-center mt-4 py-4">
            <div class="border p-4 w-100">
              <!-- Add Button -->
              <div class="d-flex rounded-2 justify-content-end pb-4">
                <div
                  id="openPeelingPanelBtn"
                  class="btn btn-outline-danger d-flex justify-content-around"
                  style="width: 150px"
                >
                  <i class="fa-solid fa-circle-plus my-auto"></i>
                  <span style="margin-top: 4px" class="fw-bold my-auto"
                    >Peeling</span
                  >
                </div>
              </div>

              <table
                id="peelingTable"
                class="rounded table table-hover nowrap w-100"
              >
                <thead>
                  <tr>
                    <th style="border-radius: 4px 0 0 0"></th>
                    <th class="fw-bold"><span>Procurement Date</span></th>
                    <th class="fw-bold"><span>Procurement Lot</span></th>
                    <th class="fw-bold">
                      <span>Total Dispatched Weight</span>
                    </th>
                    <th class="fw-bold">
                      <span>Total Peeled Items</span>
                    </th>
                    <th class="fw-bold">
                      <span>Total Peeled Weight</span>
                    </th>
                    <th class="fw-bold">
                      <span>Total Yield</span>
                    </th>
                    <th class="fw-bold">
                      <span>Total Wastage</span>
                    </th>
                  </tr>
                </thead>
              </table>
            </div>
          </div>
        </div>

        <!-- modal-dialog-centered modal-dialog-scrollable -->
        <!-- Modal -->
        <div
          id="peelingModal"
          class="modal hide fade modal-xl"
          tabindex="-1"
          role="dialog"
          aria-labelledby="myModalLabel"
          aria-hidden="true"
        >
          <div class="modal-dialog modal-dialog-scrollable">
            <!-- Modal content-->
            <div class="modal-content">
              <div class="modal-header">
                <h4 class="modal-title">Peelinged Products</h4>
                <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
                </i>
              </div>
              <div class="modal-body">
                <div class="d-flex justify-content-between">
                  <div class="form-group">
                    <label class="fw-bold" for="lot_no">Lot No:</label>
                    <span id="view_lot_no"></span>
                  </div>

                  <div class="form-group">
                    <label class="fw-bold" for="total_products"
                      >Total Peelinges:</label
                    >
                    <span id="view_total_peelinges"></span>
                  </div>

                  <div class="form-group">
                    <label class="fw-bold" for="total_weight"
                      >Total Weight:</label
                    >
                    <span id="view_total_peeling_weight"></span>
                  </div>
                </div>

                <hr class="mb-4" />

                <table
                  id="peelingProductTable"
                  class="rounded table table-hover nowrap w-100"
                >
                  <thead>
                    <tr>
                      <th style="border-radius: 4px 0 0 0"></th>
                      <th class="fw-bold"><span>Product Name</span></th>
                      <th class="fw-bold"><span>Raw Material</span></th>
                      <th class="fw-bold"><span>Dispatched Quantity</span></th>
                      <th class="fw-bold"><span>Peeled Quantity</span></th>
                      <th class="fw-bold"><span>Yield Quantity</span></th>
                      <th class="fw-bold"><span>Wastage</span></th>
                      <th class="fw-bold"><span>Peeling Method</span></th>
                      <th class="fw-bold"><span>Peeling Status</span></th>
                      <th class="fw-bold"><span>Peeling Notes</span></th>
                      <th class="fw-bold"><span>Peeling Center</span></th>
                      <th class="fw-bold"><span>Peeling Date</span></th>
                    </tr>
                  </thead>
                </table>
              </div>
              <div class="modal-footer">
                <button
                  type="button"
                  class="btn btn-default"
                  data-dismiss="modal"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Peeling Container Ends -->
      </div>
    </div>
  </body>

  <script type="text/javascript">
    jQuery(document).ready(async function ($) {
      // Declarations
      toastr.options = {
        closeButton: false,
        debug: false,
        newestOnTop: true,
        progressBar: true,
        positionClass: "toast-top-right",
        preventDuplicates: false,
        onclick: null,
        showDuration: "300",
        hideDuration: "1000",
        timeOut: "5000",
        extendedTimeOut: "1000",
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "fadeOut",
      };

      // Menu navigation
      $(".topMenu-item").click(function () {
        $(".topMenu-item").removeClass("topMenu-item-active");

        $(this).addClass("topMenu-item-active");

        $(".panelClose").click();

        resetAllInputs();
      });

      // Global Functions
      // Function to format date as YYYY-MM-DD
      function formatDate(date) {
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();

        // Ensure 2-digit formatting
        if (day < 10) {
          day = "0" + day;
        }
        if (month < 10) {
          month = "0" + month;
        }

        return year + "-" + month + "-" + day;
      }

      function resetAllInputs() {
        $("input").val("");

        // Reset all date inputs
        var dateInputs = document.querySelectorAll('input[type="date"]');
        // looping all the date inputs
        dateInputs.forEach(function (input) {
          input.value = formatDate(new Date());
        });

        // Resetting textarea
        $("textarea").val("");

        // Resetting select field selected option
        $("#lotNumbers").val(null).trigger("change");
        $("#productNames").val(null).trigger("change");
        $("#destinationLocation").val(null).trigger("change");
        $("#vehicleNumbers").val(null).trigger("change");
        $("#driverNames").val(null).trigger("change");

        $("#productNames").select2({
          placeholder: "Choose a product",
          allowClear: true,
        });

        // Peeling
        $("#peelingLotNumbers").val(null).trigger("change");
        $("#peelingCenters").val(null).trigger("change");
        $("#peelingProductNames").val(null).trigger("change");
        $("#rawMaterials").val(null).trigger("change");
        $("#peelingMethods").val(null).trigger("change");

        $("#peelingCenters").select2({
          placeholder: "Choose a peeling center",
          allowClear: true,
        });
        $("#peelingProductNames").select2({
          placeholder: "Choose a dispatched product",
          allowClear: true,
        });
        $("#rawMaterials").select2({
          placeholder: "Choose a product",
          allowClear: true,
        });
      }

      function openSlidePanel(
        panelId,
        panelHeadingId,
        panelType,
        panelSubmitButton,
        panelBtnAttrName
      ) {
        // Opening Slide Panel
        $(`#${panelId}`).css("right", "0");

        // Changing panel Heading label
        $(`#${panelHeadingId}`).text(`Add ${panelType} Data`);

        // Changing panel save button label
        $(`#${panelSubmitButton}`).text("Save");

        // Changing panel save button attribute
        $(`#${panelSubmitButton}`).attr(panelBtnAttrName, null);
      }

      function closeSlidePanel(panelId) {
        // Opening Slide Panel
        $(`#${panelId}`).css("right", "-600px");

        // Resetting all the input fields' data
        resetAllInputs();

        // Destroying select2 all the dropdowns
        // $('select.select2-hidden-accessible').select2('destroy');
      }

      // Getting data for progress bars
      function loadPercentages() {
        $.ajax({
          url: "/api/v1/procurement/lot/count/stats",
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            // Progress Bar function

            // Calculating Dispatch Percentage
            const procurement_percentage =
              data?.data?.total_purchased_weight || 0;
            const dispatch_percentage =
              data?.data?.total_dispatched_weight || 0;
            const peeling_percentage = data?.data?.total_peeled_weight || 0;
            const peeling_dispatch_percentage =
              data?.data?.total_peeling_dispatched_weight || 0;
            const packing_percentage = data?.data?.total_packed_weight || 0;

            changePercentage(
              "dispatchMenu",
              "dispatchCircle",
              "dispatchPercentage",
              null,
              "dispatchWeight",
              parseInt((dispatch_percentage / procurement_percentage) * 100) ||
                0,
              dispatch_percentage
            );
            changePercentage(
              "preprocessingMenu",
              "preprocessingCircle",
              "preprocessingPercentage",
              "preprocessingHR",
              "preprocessingWeight",
              parseInt((peeling_percentage / dispatch_percentage) * 100) || 0,
              peeling_percentage
            );
            changePercentage(
              "preprocessingDispatchMenu",
              "preprocessingDispatchCircle",
              "preprocessingDispatchPercentage",
              "preprocessingDispatchHR",
              "preprocessingDispatchWeight",
              parseInt(
                (peeling_dispatch_percentage / peeling_percentage) * 100
              ) || 0,
              peeling_dispatch_percentage
            );

            changePercentage(
              "packingMenu",
              "packingCircle",
              "packingPercentage",
              "packingHR",
              "packingWeight",
              parseInt(
                (packing_percentage / peeling_dispatch_percentage) * 100
              ) || 0,
              packing_percentage
            );
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      // Open Location on load (default)
      $(".menu-container").addClass("d-none");

      $(".dispatchContainer").removeClass("d-none");
      $(".dispatchContainer").addClass("d-block");

      resetAllInputs();
      loadPercentages();
      loadDropdowns();
      loadDispatchTableData();

      // ---------------------------------------------------------
      // ----------------------- Dispatchs -----------------------
      // ---------------------------------------------------------

      // // Open panel
      $("#openDispatchPanelBtn").click(function () {
        // $("#dispatchModal").modal("show");
        openSlidePanel(
          "dispatchSlideInPanel",
          "dispatchPanelHeading",
          "Dispatch",
          "submitDispatch",
          "dispatch_id"
        );

        $("#balance_procure_quantity").text("").css({ color: "white" });
      });

      // Close panel
      $("#closeDispatchPanelBtn").click(function () {
        closeSlidePanel("dispatchSlideInPanel");

        view_procurement_product_id = "";
      });

      $(".dispatchMenu").click(async function () {
        $(".menu-container").addClass("d-none");

        $(".dispatchContainer").removeClass("d-none");
        $(".dispatchContainer").addClass("d-block");

        // loadPercentages();
        loadDropdowns();
        loadDispatchTableData();
      });

      $(document).on(
        "click",
        ".modal-header .close, .modal-footer .close",
        () => {
          $("#dispatchModal").modal("hide");
        }
      );

      function loadDropdowns() {
        // Pre loading dropdown data
        loadLotNumber();
        loadUnits();
        loadVehicles();
        loadDrivers();
      }

      $("#submitDispatch").click(function () {
        saveDispatch();
      });

      function loadDispatchTableData() {
        $("#dispatchTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: "/api/v1/procurement/lot/get/stats/dispatch",
            error: function (xhr, error, code) {
              $("#dispatchTable").DataTable().destroy();
              $("#dispatchTable").DataTable({ scrollX: true, ordering: false });

              if (xhr["status"] == 420) {
                toastr["warning"](xhr["responseJSON"]["message"]);
              } else {
                toastr["error"](xhr["responseJSON"]["message"]);
              }
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: null },
            { data: "procurement_date" },
            { data: "procurement_lot" },
            { data: "total_product_count" },
            { data: "total_purchased_quantity" },
            { data: "total_dispatched_count" },
            { data: "total_dispatched_quantity" },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa-solid fa-eye view viewDispatches" procurement_lot_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row?.procurement_date);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];

                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return day + "-" + month + "-" + date.getFullYear();
              },
            },
            {
              targets: [2],
              className: "text-left",
              render: function (data, type, row) {
                return `<span procurement_lot_id=${row?.id}>${data}</span>`;
              },
            },
            {
              targets: [3],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [4],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
          ],
          drawCallback: () => {},
        });
      }

      $(document).on("click", ".viewDispatches", (e) => {
        // Changing panel input fields data
        $("#closeDispatchPanelBtn").click();

        // Changing panel input fields data
        const view_lot_no = $(e.target)
          .closest("tr")
          .children("td")
          .eq(2)
          .find("span")
          .attr("procurement_lot_id");

        const view_total_dispatches = $(e.target)
          .closest("tr")
          .children("td")
          .eq(5)
          .text();
        const view_total_dispatch_weight = $(e.target)
          .closest("tr")
          .children("td")
          .eq(6)
          .text();

        $("#view_lot_no").text(
          $(e.target).closest("tr").children("td").eq(2).text()
        );

        $("#view_lot_no").attr("procurement_lot_id", view_lot_no);

        $("#view_total_dispatches").text(view_total_dispatches);

        $("#view_total_dispatch_weight").text(view_total_dispatch_weight);

        // Opening Slied Panel
        $("#dispatchModal").modal("show");

        loadDispatchProductTableData(view_lot_no);
      });

      function loadDispatchProductTableData(lot_no) {
        if (!lot_no) {
          toastr["warning"]("Lot no should not be empty!");
        }
        $("#dispatchProductTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: `/api/v1/dispatch/get/all?procurement_lot_id=${lot_no}`,
            error: function (xhr, error, code) {
              $("#dispatchProductTable").DataTable().destroy();
              $("#dispatchProductTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              if (xhr["status"] == 420) {
                toastr["warning"](xhr["responseJSON"]["message"]);
              } else {
                toastr["error"](xhr["responseJSON"]["message"]);
              }
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: null },
            { data: null },
            { data: "ProcurementProduct.procurement_quantity" },
            { data: "dispatch_quantity" },
            { data: "temperature" },
            { data: "UnitMaster.unit_code" },
            { data: "VehicleMaster.vehicle_number" },
            { data: "DriverMaster.driver_name" },
            { data: "delivery_notes" },
            { data: "delivery_status" },
            { data: "created_at" },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa fa-pen-to-square edit editDispatch" dispatch_id=${
                  row?.id || null
                } procurement_id=${
                  row?.id
                } aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                return `<span procurement_product_id='${
                  row["ProcurementProduct"]?.id
                }'>${
                  row["ProcurementProduct"]?.["ProductMaster"]?.product_name
                }-${row["ProcurementProduct"]?.procurement_product_type}-${row[
                  "ProcurementProduct"
                ]?.["VendorMaster"]?.vendor_name?.replaceAll(" ", "")}</i>`;
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return `<span unit_master_id='${row["UnitMaster"]?.id}'>${data}</i>`;
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return `<span vehicle_master_id='${row["VehicleMaster"]?.id}'>${data}</i>`;
              },
            },
            {
              targets: [7],
              className: "text-left",
              render: function (data, type, row) {
                return `<a href="tel:${
                  row["DriverMaster"]?.phone?.startsWith("91")
                    ? `+${row["DriverMaster"]?.phone}`
                    : row["DriverMaster"]?.phone?.startsWith("+91")
                    ? row["DriverMaster"]?.phone
                    : `+91${row["DriverMaster"]?.phone}`
                }" driver_master_id='${row["DriverMaster"]?.id}'>${data}</i>`;
              },
            },
            {
              targets: [9],
              className: "text-left",
              render: (data, type, row) => {
                return `<span class=${
                  data == "In Transit" ? "text-warning" : "text-success"
                }>${data} <i class="fa-solid ${
                  data == "In Transit"
                    ? "fa-truck-fast fa-fade"
                    : "fa-circle-check fa-beat-fade"
                }"></i></span>`;
              },
            },
            {
              targets: [10],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row?.created_at);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];
                var hours = date.getHours();
                var minutes = date.getMinutes();
                var ampm = hours >= 12 ? "PM" : "AM";
                hours = hours % 12;
                hours = hours ? hours : 12; // Handle midnight (0 hours)
                minutes = minutes < 10 ? "0" + minutes : minutes;
                var strTime = hours + ":" + minutes + " " + ampm;
                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return (
                  day + "-" + month + "-" + date.getFullYear() + " " + strTime
                );
              },
            },
          ],
          drawCallback: () => {},
        });
      }

      let view_procurement_product_id = "";
      $(document).on("click", ".editDispatch", (e) => {
        // Changing panel input fields data

        $("#lotNumbers")
          .val($("#view_lot_no").attr("procurement_lot_id"))
          .trigger("change");

        view_procurement_product_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(1)
          .find("span")
          .attr("procurement_product_id");

        $("#productNames").val(view_procurement_product_id).trigger("change");

        $("#dispatch_quantity").val(
          $(e.target).closest("tr").children("td").eq(3).text()
        );

        $("#dispatch_temperature").val(
          $(e.target).closest("tr").children("td").eq(4).text()
        );

        $("#destinationLocation")
          .val(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(5)
              .find("span")
              .attr("unit_master_id")
          )
          .trigger("change");

        $("#vehicleNumbers")
          .val(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(6)
              .find("span")
              .attr("vehicle_master_id")
          )
          .trigger("change");

        $("#driverNames")
          .val(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(7)
              .find("a")
              .attr("driver_master_id")
          )
          .trigger("change");

        $("#delivery_notes").val(
          $(e.target).closest("tr").children("td").eq(8).text()
        );

        // Opening Slied Panel
        $("#openDispatchPanelBtn").click();

        // Changing panel heading
        $("#dispatchPanelHeading").text("Edit Dispatch Data");

        // Changing panel button label
        $("#submitDispatch").text("Update");

        // Changing panel button attribute
        $("#submitDispatch").attr(
          "dispatch_id",
          $(e.target).attr("dispatch_id")
        );

        $("#dispatchModal").modal("hide");
      });

      function loadLotNumber() {
        $.ajax({
          url: `/api/v1/procurement/lot/get/lots/all`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#lotNumbers").select2({
              placeholder: "Choose a lot",
              allowClear: "true",
              data: $.map(data?.data, function (item) {
                return {
                  id: item.id,
                  text: item.procurement_lot,
                };
              }),
            });

            $("#lotNumbers").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      $(document).on("change", "#lotNumbers", () => {
        $("#balance_procure_quantity").text("");

        let lot_no = $("#lotNumbers").val();

        $("#productNames").empty();

        if (lot_no) {
          loadProducts(lot_no);
        }
      });

      let balance_procure_quantity = 0;
      $(document).on("change", "#productNames", () => {
        $("#balance_procure_quantity").text("");

        if ($("#productNames").val()) {
          balance_procure_quantity =
            $("#productNames").select2("data")[0]?.quantity;

          if (!isNaN(balance_procure_quantity)) {
            $("#balance_procure_quantity").text(
              parseFloat(balance_procure_quantity)
            );

            $("#balance_procure_quantity").css({ color: "white" });
          }
        }
      });

      $(document).on("keyup", "#dispatch_quantity", (e) => {
        const currentDispatchedQuantity = $(e.target).val();
        const procurementQuantity = parseFloat(
          $("#productNames").select2("data")[0]?.quantity
        );

        if (!currentDispatchedQuantity) {
          $("#balance_procure_quantity").text(balance_procure_quantity);
          $("#balance_procure_quantity").css({ color: "white" });
          return;
        }

        let balanceQuantity = procurementQuantity - currentDispatchedQuantity;

        $("#balance_procure_quantity").text(
          !isNaN(balanceQuantity) ? balanceQuantity : currentDispatchedQuantity
        );

        if (balanceQuantity > 0) {
          $("#balance_procure_quantity").css({ color: "yellow" });
        } else {
          $("#balance_procure_quantity").css({ color: "red" });
        }
      });

      function loadProducts(lot_no) {
        $("#productNames").empty();

        if (!lot_no) {
          toastr["warning"]("Invalid lot number!");
          return;
        }

        $.ajax({
          url: `/api/v1/procurement/product/get/names/all?procurement_lot_id=${lot_no}`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#productNames").select2({
              placeholder: "Choose a product",
              allowClear: "true",
              data: $.map(data?.data, function (item) {
                return {
                  id: item.id,
                  quantity:
                    (parseFloat(item?.procurement_quantity) || 0) -
                    (parseFloat(item?.dispatched_quantity) || 0),
                  text: `${item?.ProductMaster?.product_name}-${
                    item?.procurement_product_type
                  }-${item?.VendorMaster?.vendor_name?.replaceAll(" ", "")}`,
                };
              }),
            });

            // if (view_procurement_product_id) {
            //   $("#productNames")
            //     .val(view_procurement_product_id)
            //     .trigger("change");
            // } else {
            $("#productNames").val(null).trigger("change");
            // }

            if (view_procurement_product_id) {
              $("#productNames")
                .val(view_procurement_product_id)
                .trigger("change");
            }
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadUnits() {
        $.ajax({
          url: "/api/v1/master/unit/get/all?unit_type=Peeling Center",
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#destinationLocation").select2({
              placeholder: "Choose a destination",
              allowClear: "true",
              data: $.map(data?.data?.rows, function (item) {
                return {
                  id: item.id,
                  text: item.unit_code,
                };
              }),
            });

            $("#destinationLocation").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadVehicles() {
        $.ajax({
          url: "/api/v1/master/vehicle/get/all",
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#vehicleNumbers").select2({
              placeholder: "Choose a vehicle",
              allowClear: "true",
              data: $.map(data?.data?.rows, function (item) {
                return {
                  id: item.id,
                  text: item.vehicle_number,
                };
              }),
            });

            $("#vehicleNumbers").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadDrivers() {
        $.ajax({
          url: "/api/v1/master/driver/get/all",
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#driverNames").select2({
              placeholder: "Choose a driver",
              allowClear: "true",
              data: $.map(data?.data?.rows, function (item) {
                return {
                  id: item.id,
                  text: item.driver_name,
                };
              }),
            });

            $("#driverNames").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function saveDispatch() {
        const dispatch_id = $("#submitDispatch").attr("dispatch_id");
        const current_weight_balance = $("#balance_procure_quantity").text();

        if (parseFloat(current_weight_balance) <= -1) {
          toastr["warning"]("Invalid dispatch quantity");
          return;
        }

        let url = "/api/v1/dispatch/create";
        let input_params = {
          procurement_product_id: $("#productNames").val(),
          unit_master_id: $("#destinationLocation").val(),
          dispatch_quantity: $("#dispatch_quantity").val(),
          temperature: $("#dispatch_temperature").val(),
          delivery_notes: $("#delivery_notes").val(),
          vehicle_master_id: $("#vehicleNumbers").val(),
          driver_master_id: $("#driverNames").val(),
        };

        if (dispatch_id && dispatch_id != "null") {
          url = "/api/v1/dispatch/update";

          input_params = {
            dispatch_id,
            dispatch_data: {
              ...input_params,
            },
          };
        }

        $.ajax({
          url,
          method: "POST",
          dataType: "json",
          contentType: "application/json",
          data: JSON.stringify(input_params),
          crossDomain: true,
          processData: false,
          success: (data) => {
            toastr["success"](data?.message);

            $("#closeDispatchPanelBtn").click();

            loadPercentages();

            loadDispatchTableData();

            resetAllInputs();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      $("#resetDispatchDataBtn").on("click", resetAllInputs);
      // -------------------- End of Dispatch -----------------

      // ---------------------------------------------------------
      // ----------------------- Peelings ------------------------
      // ---------------------------------------------------------

      // // Open panel
      $("#openPeelingPanelBtn").click(function () {
        // $("#peelingModal").modal("show");
        openSlidePanel(
          "peelingSlideInPanel",
          "peelingPanelHeading",
          "Peeling",
          "submitPeeling",
          "peeling_id"
        );

        $("#balance_dispatched_quantity").text("").css({ color: "white" });
      });

      // Close panel
      $("#closePeelingPanelBtn").click(function () {
        closeSlidePanel("peelingSlideInPanel");

        view_dispatched_product_id = "";
      });

      $(".peelingMenu").click(async function () {
        $(".menu-container").addClass("d-none");

        $(".peelingContainer").removeClass("d-none");
        $(".peelingContainer").addClass("d-block");

        // loadPercentages();
        loadPeelingDropdowns();
        loadPeelingTableData();
      });

      $(document).on("click", ".modal-header .close", () => {
        $("#peelingModal").modal("hide");
      });

      $(document).on(
        "click",
        ".modal-header .close, .modal-footer .close",
        () => {
          $("#peelingModal").modal("hide");
        }
      );

      function loadPeelingDropdowns() {
        // Peeling Dropdown
        loadPeelingLotNumber();

        loadPeelingMethods();
      }

      $("#submitPeeling").click(function () {
        savePeeling();
      });

      function loadPeelingTableData() {
        $("#peelingTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: "/api/v1/procurement/lot/get/stats/peeling",
            error: function (xhr, error, code) {
              $("#peelingTable").DataTable().destroy();
              $("#peelingTable").DataTable({ scrollX: true, ordering: false });

              if (xhr["status"] == 420) {
                toastr["warning"](xhr["responseJSON"]["message"]);
              } else {
                toastr["error"](xhr["responseJSON"]["message"]);
              }
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: null },
            { data: "procurement_date" },
            { data: "procurement_lot" },
            { data: "total_dispatched_quantity" },
            { data: "total_peeled_count" },
            { data: "total_peeled_quantity" },
            { data: "total_yield_quantity" },
            { data: null },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa-solid fa-eye view viewPeeling" procurement_lot_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row?.procurement_date);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];

                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return day + "-" + month + "-" + date.getFullYear();
              },
            },
            {
              targets: [2],
              className: "text-left",
              render: function (data, type, row) {
                return `<span procurement_lot_id=${row?.id}>${data}</span>`;
              },
            },
            {
              targets: [3],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [4],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [7],
              className: "text-left",
              render: function (data, type, row) {
                const peeling_quantity = parseFloat(
                  row["total_peeled_quantity"]
                );
                const yield_quantity = parseFloat(row["total_yield_quantity"]);
                const wastage_quantity = peeling_quantity - yield_quantity;
                return isNaN(wastage_quantity) ? 0 : wastage_quantity;
              },
            },
          ],
          drawCallback: () => {},
        });
      }

      $(document).on("click", ".viewPeeling", (e) => {
        // Changing panel input fields data
        $("#closePeelingPanelBtn").click();

        // Changing panel input fields data
        const view_procurement_lot_id = $(e.target).attr("procurement_lot_id");

        const view_total_peeling = $(e.target)
          .closest("tr")
          .children("td")
          .eq(4)
          .text();

        const view_total_peeling_weight = $(e.target)
          .closest("tr")
          .children("td")
          .eq(5)
          .text();

        $("#view_lot_no").text(
          $(e.target).closest("tr").children("td").eq(2).text()
        );

        // Top Header
        $("#view_lot_no").attr("procurement_lot_id", view_procurement_lot_id);

        $("#view_total_peelinges").text(view_total_peeling);

        $("#view_total_peeling_weight").text(view_total_peeling_weight);

        // Opening Slied Panel
        $("#peelingModal").modal("show");

        loadPeelingProductTableData(view_procurement_lot_id);
      });

      function loadPeelingProductTableData(procurement_lot_id) {
        if (!procurement_lot_id) {
          toastr["warning"]("Procurement lot data should not be empty!");
        }

        $("#peelingProductTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: `/api/v1/peeling/get/all?procurement_lot_id=${procurement_lot_id}`,
            error: function (xhr, error, code) {
              $("#peelingProductTable").DataTable().destroy();
              $("#peelingProductTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              if (xhr["status"] == 420) {
                toastr["warning"](xhr["responseJSON"]["message"]);
              } else {
                toastr["error"](xhr["responseJSON"]["message"]);
              }
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: null },
            {
              data: "Dispatch.ProcurementProduct.ProductMaster.product_name",
            },
            { data: "ProductMaster.product_name" },
            { data: "Dispatch.dispatch_quantity" },
            { data: "peeling_quantity" },
            { data: "yield_quantity" },
            { data: null },
            { data: "peeling_method" },
            { data: "peeling_status" },
            { data: "peeling_notes" },
            { data: "UnitMaster.unit_code" },
            { data: "created_at" },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa fa-pen-to-square edit editPeeling" peeling_id=${
                  row?.["Dispatch"]?.id || null
                } dispatch_id=${
                  row?.id
                } aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                return `<span procurement_product_id='${row["Dispatch"]?.["ProcurementProduct"]?.id}'>${data}</i>`;
              },
            },
            {
              targets: [2],
              className: "text-left",
              render: function (data, type, row) {
                return `<span product_master_id='${row["ProductMaster"]?.id}'>${data}</i>`;
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                const peeling_quantity = parseFloat(row["peeling_quantity"]);
                const yield_quantity = parseFloat(row["yield_quantity"]);
                const wastage_quantity = peeling_quantity - yield_quantity;
                return isNaN(wastage_quantity) ? 0 : wastage_quantity;
              },
            },
            {
              targets: [8],
              className: "text-left",
              render: function (data, type, row) {
                return `<span class=${
                  data == "In Progress" ? "text-warning" : "text-success"
                }>${data} <i class="fa-solid ${
                  data == "In Progress"
                    ? "fa-spinner fa-spin"
                    : "fa-circle-check fa-beat-fade"
                }"></i></span>`;
              },
            },
            {
              targets: [9],
              className: "text-left",
              render: function (data, type, row) {
                return `<span unit_master_id='${row["UnitMaster"]?.id}'>${data}</i>`;
              },
            },
            {
              targets: [11],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row?.created_at);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];
                var hours = date.getHours();
                var minutes = date.getMinutes();
                var ampm = hours >= 12 ? "PM" : "AM";
                hours = hours % 12;
                hours = hours ? hours : 12; // Handle midnight (0 hours)
                minutes = minutes < 10 ? "0" + minutes : minutes;
                var strTime = hours + ":" + minutes + " " + ampm;
                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return (
                  day + "-" + month + "-" + date.getFullYear() + " " + strTime
                );
              },
            },
          ],
          drawCallback: () => {},
        });
      }

      let view_peeling_product_id = "";
      $(document).on("click", ".editPeeling", (e) => {
        // Changing panel input fields data

        $("#peelingLotNumbers")
          .val($("#view_lot_no").attr("procurement_lot_id"))
          .trigger("change");

        $("#destinationLocation")
          .val(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(5)
              .find("span")
              .attr("unit_master_id")
          )
          .trigger("change");

        view_peeling_product_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(1)
          .find("span")
          .attr("procurement_product_id");

        $("#peelingCenters").val(view_peeling_product_id).trigger("change");

        $("#rawMaterials")
          .val(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(2)
              .find("span")
              .attr("product_master_id")
          )
          .trigger("change");

        $("#peeling_quantity").val(
          $(e.target).closest("tr").children("td").eq(4).text()
        );

        $("#yield_quantity").val(
          $(e.target).closest("tr").children("td").eq(5).text()
        );

        $("#peelingMethods")
          .val($(e.target).closest("tr").children("td").eq(6).text())
          .trigger("change");

        $("#peeling_notes").val(
          $(e.target).closest("tr").children("td").eq(9).text()
        );

        // Opening Slied Panel
        $("#openPeelingPanelBtn").click();

        // Changing panel heading
        $("#peelingPanelHeading").text("Edit Peeling Data");

        // Changing panel button label
        $("#submitPeeling").text("Update");

        // Changing panel button attribute
        $("#submitPeeling").attr("peeling_id", $(e.target).attr("peeling_id"));

        $("#peelingModal").modal("hide");
      });

      function loadPeelingLotNumber() {
        $.ajax({
          url: `/api/v1/procurement/lot/get/lots/dispatch/all`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#peelingLotNumbers").select2({
              placeholder: "Choose a lot",
              allowClear: "true",
              data: $.map(data?.data, function (item) {
                return {
                  id: item.id,
                  text: item.procurement_lot,
                };
              }),
            });

            $("#peelingLotNumbers").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });

        $(document).on("change", "#peelingLotNumbers", () => {
          $("#balance_dispatched_quantity").text("");

          let lot_no = $("#peelingLotNumbers").val();

          $("#peelingCenters").empty();
          $("#peelingProductNames").empty();
          $("#rawMaterials").empty();

          if (lot_no) {
            loadPeelingCenters(lot_no);
          }
        });
      }

      function loadPeelingCenters(procurement_lot_id) {
        if (!procurement_lot_id) {
          toastr["warning"]("Lot number must not be empty");
        }

        $.ajax({
          url:
            "/api/v1/master/unit/get/dispatch/destination/all?procurement_lot_id=" +
            procurement_lot_id,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#peelingCenters").select2({
              placeholder: "Choose a peeling center",
              allowClear: "true",
              data: $.map(data?.data, function (item) {
                return {
                  id: item.id,
                  text: item.unit_code,
                };
              }),
            });

            $("#peelingCenters").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });

        $(document).on("change", "#peelingCenters", () => {
          $("#balance_dispatched_quantity").text("");

          let lot_no = $("#peelingLotNumbers").val();
          let unit_master_id = $("#peelingCenters").val();

          $("#peelingProductNames").empty();
          $("#rawMaterials").empty();

          if (lot_no && unit_master_id) {
            loadPeelingProducts(lot_no, unit_master_id);
          }
        });
      }

      function loadPeelingProducts(lot_no, unit_master_id) {
        $("#peelingProductNames").empty();

        if (!lot_no) {
          toastr["warning"]("Invalid lot number!");
          return;
        }

        if (!unit_master_id) {
          toastr["warning"]("Invalid Peeling center!");
          return;
        }

        $.ajax({
          url: `/api/v1/procurement/product/get/names/dispatched/all?procurement_lot_id=${lot_no}&unit_master_id=${unit_master_id}`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#peelingProductNames").select2({
              placeholder: "Choose a product",
              allowClear: "true",
              data: $.map(data?.data, function (item) {
                return {
                  id: item?.id,
                  product_categoty_master_id:
                    item?.ProcurementProduct?.ProductMaster
                      .ProductCategoryMaster.id,
                  quantity: item?.dispatch_quantity || 0,
                  text: `${
                    item?.ProcurementProduct?.ProductMaster?.product_name
                  }-${
                    item?.ProcurementProduct?.procurement_product_type
                  }-${item?.ProcurementProduct?.VendorMaster?.vendor_name?.replaceAll(
                    " ",
                    ""
                  )}-${item?.dispatch_quantity || 0}`,
                };
              }),
            });

            $("#peelingProductNames").val(null).trigger("change");

            if (view_peeling_product_id) {
              $("#peelingProductNames")
                .val(view_peeling_product_id)
                .trigger("change");
            }
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });

        $(document).on("change", "#peelingProductNames", (e) => {
          $("#balance_dispatched_quantity").text("");

          $("#rawMaterials").empty();

          if ($("#peelingProductNames").val()) {
            balance_dispatched_quantity = $("#peelingProductNames").select2(
              "data"
            )[0]?.quantity;

            if (!isNaN(balance_dispatched_quantity)) {
              $("#balance_dispatched_quantity").text(
                parseFloat(balance_dispatched_quantity)
              );

              $("#balance_dispatched_quantity").css({ color: "white" });
            }

            let product_categoty_master_id = $("#peelingProductNames").select2(
              "data"
            )[0]?.product_categoty_master_id;
            loadPeelingRawMaterials(product_categoty_master_id);
          }
        });
      }

      $(document).on("keyup", "#peeling_quantity", (e) => {
        const currentPeelingedQuantity = $(e.target).val();
        const procurementQuantity = parseFloat(
          $("#peelingProductNames").select2("data")[0]?.quantity
        );

        if (!currentPeelingedQuantity) {
          $("#balance_dispatched_quantity").text(balance_dispatched_quantity);
          $("#balance_dispatched_quantity").css({ color: "white" });
          return;
        }

        let balanceQuantity = procurementQuantity - currentPeelingedQuantity;

        $("#balance_dispatched_quantity").text(
          !isNaN(balanceQuantity) ? balanceQuantity : currentPeelingedQuantity
        );

        if (balanceQuantity > 0) {
          $("#balance_dispatched_quantity").css({ color: "yellow" });
        } else {
          $("#balance_dispatched_quantity").css({ color: "red" });
        }
      });

      function loadPeelingRawMaterials(product_category_master_id) {
        $("#rawMaterials").empty();

        if (!product_category_master_id) {
          toastr["warning"]("Product data must not be empty");
        }

        $.ajax({
          url:
            "/api/v1/master/product/get/all?product_category_master_id=" +
            product_category_master_id,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            $("#rawMaterials").select2({
              placeholder: "Choose a product",
              allowClear: "true",
              data: $.map(data?.data?.rows, function (item) {
                return {
                  id: item.id,
                  text: item.product_name,
                };
              }),
            });

            $("#rawMaterials").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadPeelingMethods() {
        $("#peelingMethods").select2({
          placeholder: "Choose a method",
          allowClear: "true",
          data: [
            {
              id: "Manual",
              text: "Manual",
            },
            {
              id: "Chemical",
              text: "Chemical",
            },
          ],
        });

        $("#peelingMethods").val(null).trigger("change");
      }

      function savePeeling() {
        const peeling_id = $("#submitPeeling").attr("peeling_id");
        const current_weight_balance = $("#balance_dispatched_quantity").text();
        const peeling_quantity = parseFloat($("#peeling_quantity").val()) || 0;
        const yield_quantity = parseFloat($("#yield_quantity").val()) || 0;

        if (parseFloat(current_weight_balance) <= -1) {
          toastr["warning"]("Invalid peeling quantity");
          return;
        }

        let url = "/api/v1/peeling/create";
        let input_params = {
          dispatch_id: $("#peelingProductNames").val(),
          product_master_id: $("#rawMaterials").val(),
          unit_master_id: $("#peelingCenters").val(),
          peeling_quantity,
          yield_quantity,
          peeling_method: $("#peelingMethods").val(),
          peeling_notes: $("#peeling_notes").val(),
        };

        if (peeling_id && peeling_id != "null") {
          url = "/api/v1/peeling/update";

          input_params = {
            peeling_id,
            peeling_data: {
              ...input_params,
            },
          };
        }

        if (peeling_quantity < yield_quantity) {
          toastr["warning"](
            "Yield quantity must not be gra=eater than peeling quantity!"
          );
        }

        $.ajax({
          url,
          method: "POST",
          dataType: "json",
          contentType: "application/json",
          data: JSON.stringify(input_params),
          crossDomain: true,
          processData: false,
          success: (data) => {
            toastr["success"](data?.message);

            $("#closePeelingPanelBtn").click();

            loadPercentages();

            loadPeelingTableData();

            resetAllInputs();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      $("#resetPeelingDataBtn").on("click", resetAllInputs);
      // -------------------- End of Peeling -----------------

      function changePercentage(
        main_id,
        circle_id,
        percentage_id,
        hr_id,
        weight_id,
        percent,
        weight
      ) {
        $(`#${circle_id}`).attr("data-percentage", percent);

        $(`#${percentage_id}`).text(`${percent}%`);

        $(`.${weight_id}`).text(weight);

        // Get radius of the svg's circle.complete
        radius = $(`#${circle_id}`).find($("circle.complete")).attr("r");
        // Get circumference (2πr)
        circumference = 2 * Math.PI * radius;
        // Get stroke-dashoffset value based on the percentage of the circumference
        strokeDashOffset = circumference - (percent * circumference) / 100;
        // Transition progress for 1.25 seconds
        $(`#${circle_id}`)
          .find($("circle.complete"))
          .animate({ "stroke-dashoffset": strokeDashOffset }, 1250);

        $(`#${percentage_id}`)
          .prop("Counter", 0)
          .animate(
            {
              Counter: $(`#${percentage_id}`).text(),
            },
            {
              duration: 2000,
              easing: "swing",
              step: function (now) {
                now = Number(Math.ceil(parseFloat(now))).toLocaleString("en");
                $(`#${percentage_id}`).text(`${now}%`);
              },
            }
          );

        $(`.${weight_id}`)
          .prop("Counter", 0)
          .animate(
            {
              Counter: $(`.${weight_id}`).text(),
            },
            {
              duration: 2000,
              easing: "swing",
              step: function (now) {
                now = Number(Math.ceil(parseFloat(now))).toLocaleString("en");
                $(`.${weight_id}`).text(`${now} kg`);
              },
            }
          );

        if (percent > 0) {
          $(`#${hr_id}`).css({ opacity: "0.8" });

          if (percent == 100) {
            $(`.${main_id}`)
              .find($("circle.complete"))
              .css({ stroke: "green" });
            $(`.${main_id}`).find("text").css({ fill: "green" });
            $(`.${main_id}`).find(".heading").css({ color: "green" });
            $(`.${main_id}`).find(".weight").css({ color: "green" });
          } else {
            if ($(`.${main_id}`).hasClass("topMenu-item-active")) {
              $(`.${main_id}`)
                .find($("circle.complete"))
                .css({ stroke: "#1f2d3e" });
              $(`.${main_id}`).find("text").css({ fill: "#1f2d3e" });
              // $(`.${main_id}`).find(".heading").css({ color: "#ea5455" });
              // $(`.${main_id}`).find(".weight").css({ color: "#ea5455" });
            } else {
              $(`.${main_id}`)
                .find($("circle.complete"))
                .css({ stroke: "#1f2d3e" });
              $(`.${main_id}`).find("text").css({ fill: "#1f2d3e" });
              // $(`.${main_id}`).find(".heading").css({ color: "#1f2d3e" });
              // $(`.${main_id}`).find(".weight").css({ color: "#1f2d3e" });
            }
          }
        } else {
          $(`#${hr_id}`).css({ opacity: "0.2" });
        }
      }
    });
  </script>
</html>
